<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://the-m3chanic.github.io</id>
    <title>The Workshop</title>
    <subtitle></subtitle>
    <icon>https://the-m3chanic.github.io/images/favicon.ico</icon>
    <link href="https://the-m3chanic.github.io" />
    <author>
      <name>Suraj Kumar</name>
    </author>
    <updated>2024-08-25T11:41:29.000Z</updated>
    <entry>
        <id>https://the-m3chanic.github.io/2024/08/25/GSoC-Final-Report/</id>
        <title>GSoC - Final Report</title>
        <link rel="alternate" href="https://the-m3chanic.github.io/2024/08/25/GSoC-Final-Report/"/>
        <content type="html">&lt;p&gt;&lt;img data-src=&#34;/images/post_images/GSoC-Final-Report/GSoC-logo.png&#34; alt=&#34;gsoc logo&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;gsoc-24-final-project-report&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gsoc-24-final-project-report&#34;&gt;#&lt;/a&gt; GSoC &#39;24 - Final Project Report&lt;/h1&gt;
&lt;p&gt;The following report summarises the work I have done during Google Summer of Code 2024, along with the results, scope for improvements and future work. This also serves as the final project report with all the contributions.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Basic Info&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Details&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Suraj Kumar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Email&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOmhpc3VyYWprdW1hcjIwMDRAZ21haWwuY29t&#34;&gt;hisurajkumar2004@gmail.com&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Gitlab&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRsYWIucnRlbXMub3JnL3RoZS5tM2NoYW5pYw==&#34;&gt;the.m3chanic&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;LinkedIn&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL3RoZS1tM2NoYW5pYy8=&#34;&gt;the-m3chanic&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Twitter/X&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94LmNvbS90aGVfbTNjaGFuaWNf&#34;&gt;the-m3chanic&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;University&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYW1yaXRhLmVkdS9jYW1wdXMvYW1yaXRhcHVyaS8=&#34;&gt;Amrita Vishwa Vidyapeetham, Amritapuri&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Organization&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnRlbXMub3Jn&#34;&gt;RTEMS Project&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Project Title&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Add Python initializer to GDB in RTEMS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Project Link&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRsYWIucnRlbXMub3JnL3J0ZW1zLw==&#34;&gt;RTEMS Project Repository&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Project Tracker&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRsYWIucnRlbXMub3JnL2dyb3Vwcy9ydGVtcy8tL2VwaWNzLzE=&#34;&gt;RTEMS Project Tracker&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Note: The work done during the course of this Project (the code I have written), can be found &lt;a href=&#34;#work-completed&#34;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#background&#34;&gt;#&lt;/a&gt; Background&lt;/h2&gt;
&lt;p&gt;My journey into Open Source began with a modest contribution — a documentation fix for a tool I was using. I encountered some build issues, realized that a few steps in the instructions were incorrect, and submitted a PR to correct them. It wasn’t until later that I fully grasped the impact of that contribution. Knowing that my small fix could help others avoid the same frustration gave me a sense of fulfillment.&lt;/p&gt;
&lt;p&gt;I discovered RTEMS while exploring organizations participating in GSoC 2024. As I browsed through the list of projects, one in particular caught my eye — tagged with  &lt;code&gt;GDB&lt;/code&gt;  and  &lt;code&gt;Python&lt;/code&gt; . Given my background in Reverse Engineering, I was immediately drawn to it and knew I wanted to make it my project. When I received my GSoC acceptance email on May 2nd, during my 2nd year in Undergrad College, I knew this summer was going to be something special. I had heard a lot about the mentor-mentee model that GSoC champions and was eager to experience it firsthand.&lt;/p&gt;
&lt;h2 id=&#34;about-the-project&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#about-the-project&#34;&gt;#&lt;/a&gt; About the Project&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/GSoC-Final-Report/RTEMS-logo.png&#34; alt=&#34;rtems logo&#34; /&gt;&lt;/p&gt;
&lt;p&gt;RTEMS (Real-Time Executive for Multiprocessor Systems) is an open-source real-time operating system (RTOS) designed for embedded systems requiring high reliability and deterministic behavior.&lt;/p&gt;
&lt;p&gt;RTEMS provides the capability to build custom toolchains tailored to various target architectures, leveraging standard tools like GCC, Binutils, GDB and many more. These tools are essential for compiling, linking and debugging embedded applications on RTEMS.&lt;/p&gt;
&lt;p&gt;The project involved modifying the &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zb3VyY2V3YXJlLm9yZy9nZGIv&#34;&gt;GNU Debugger (GDB)&lt;/span&gt; to enhance its debugging capabilities within RTEMS.&lt;/p&gt;
&lt;h2 id=&#34;problem-statement&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#problem-statement&#34;&gt;#&lt;/a&gt; Problem Statement&lt;/h2&gt;
&lt;p&gt;GDB includes built-in support for automatically loading Python, but this feature is limited to dynamic executables. In such cases, when a specific library is loaded by the object file in GDB, the linker triggers GDB to load the corresponding pretty-printing scripts for that library.&lt;/p&gt;
&lt;p&gt;However, RTEMS is fully statically linked, and this automatic loading does not apply to statically linked executables. Without a linker to notify GDB when a library is loaded, Python is not automatically loaded. As a result, many features that rely on Python are unavailable, leading to a significant loss in functionality during debugging.&lt;/p&gt;
&lt;h2 id=&#34;project-goals&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#project-goals&#34;&gt;#&lt;/a&gt; Project Goals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Integrate a Python initializer into GDB for RTEMS to facilitate enhanced debugging.&lt;/li&gt;
&lt;li&gt;Enable GDB to automatically load pretty-printing scripts for RTEMS structures and libstdcxx classes.&lt;/li&gt;
&lt;li&gt;Seamlessly integrate these changes into the RTEMS toolchain, reducing the need for involvement from the user.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;approach&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#approach&#34;&gt;#&lt;/a&gt; Approach&lt;/h2&gt;
&lt;p&gt;A brief summary of my approach is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Initial Exploration:&lt;/strong&gt; I began by reviewing existing solutions employed by companies like Rust and AdaCore, which typically involve adding a wrapper over the host GDB to resolve paths for pretty-printers. To gain deeper insights, I engaged in discussions with developers from both companies as well as with GDB developers to understand the rationale behind this approach. However, I found this method unsuitable for RTEMS due to its use of a distinct toolchain for each build, separate from the host toolchain. Additionally, the wrapper approach proved to be generally inefficient for our needs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Implemented Solution:&lt;/strong&gt; I introduced a .debug_gdb_scripts section to every ELF binary. This was done by adding the section in the  &lt;code&gt;cpukit/sapi/src/exinit.c&lt;/code&gt;  file, since it is linked to every application built on RTEMS. As a result, every RTEMS-built application now includes this section.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python script execution:&lt;/strong&gt; This new executable section contains a snippet of Python code that corrects paths and triggers GDB to run a script called  &lt;code&gt;pprinter.py&lt;/code&gt; . This script is responsible for registering both libstdcxx and RTEMS pretty-printers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Toolchain Integration:&lt;/strong&gt; The  &lt;code&gt;stdcxx.py&lt;/code&gt;  script, which registers the  &lt;code&gt;libstdcxx&lt;/code&gt;  pretty-printers, needs to know the version of GCC being used since the pretty-printer scripts provided by GCC vary with versions. Therefore, the script is built alongside the toolchain to ensure compatibility.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RTEMS Pretty-Printer Registration:&lt;/strong&gt; Finally, the  &lt;code&gt;pprinter.py&lt;/code&gt;  script invokes a build function from rtems_pprinter.py, which registers all the RTEMS-specific pretty-printers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a flow chart highlighting the work flow underwent for the entire project:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/images/post_images/GSoC-Final-Report/project-flowchart.png&#34; alt=&#34;project flow chart&#34; /&gt;&lt;/p&gt;
&lt;p&gt;(Note: The boxes in Blue signify changes that apply to every application being built now on, and Yellow boxes signify changes to supporting scripts and updates to the build process)&lt;/p&gt;
&lt;h2 id=&#34;work-completed&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#work-completed&#34;&gt;#&lt;/a&gt; &lt;strong&gt;Work Completed&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;NOTE: These are the Merge Requests I made, all of which have gotten approved and merged to the upstream branch&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;python-initializer-for-gdb&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python-initializer-for-gdb&#34;&gt;#&lt;/a&gt; Python Initializer for GDB&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.rtems.org/rtems/rtos/rtems/-/merge_requests/98&#34;&gt;&lt;strong&gt;Merge Request !98 in RTOS&lt;/strong&gt;&lt;/a&gt;: Implemented a custom section  &lt;code&gt;.debug_gdb_scripts&lt;/code&gt;  in RTEMS executables for GDB to load Python scripts automatically.&lt;/li&gt;
&lt;li&gt;Developed and tested integration with the RTEMS build system to ensure Python scripts are executed upon loading an application.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pretty-printers-integration&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pretty-printers-integration&#34;&gt;#&lt;/a&gt; Pretty-Printers Integration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.rtems.org/rtems/tools/rtems-tools/-/merge_requests/26&#34;&gt;&lt;strong&gt;MR !26 in Tools&lt;/strong&gt;&lt;/a&gt;: Added support for pretty-printers for RTEMS-specific data structures.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.rtems.org/rtems/tools/rtems-tools/-/merge_requests/26&#34;&gt;&lt;strong&gt;MR !26 in Tools&lt;/strong&gt;&lt;/a&gt;: Created a script  &lt;code&gt;pprinter.py&lt;/code&gt;  to enhance GDB&#39;s ability to display RTEMS structures in a user-friendly format.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;integration-with-rtems-toolchain&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#integration-with-rtems-toolchain&#34;&gt;#&lt;/a&gt; Integration with RTEMS Toolchain&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.rtems.org/rtems/tools/rtems-source-builder/-/merge_requests/35&#34;&gt;&lt;strong&gt;MR !35 in RSB&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://gitlab.rtems.org/rtems/tools/rtems-source-builder/-/merge_requests/48&#34;&gt;&lt;strong&gt;MR !48 in RSB&lt;/strong&gt;&lt;/a&gt;: Modified the RTEMS Source Builder (RSB) to include the necessary changes for building  &lt;code&gt;stdcxx.py&lt;/code&gt;  with the latest GCC.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.rtems.org/rtems/docs/rtems-docs/-/merge_requests/43&#34;&gt;&lt;strong&gt;MR !43 in Docs&lt;/strong&gt;&lt;/a&gt;: Updated documentation to reflect new features and usage instructions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;current-state&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#current-state&#34;&gt;#&lt;/a&gt; Current State&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;All major features have been implemented and tested.&lt;/li&gt;
&lt;li&gt;Python initialization and pretty-printer support have been integrated into the RTEMS build system.&lt;/li&gt;
&lt;li&gt;Pretty-printers for some basic RTEMS score structures have been written and tested.&lt;/li&gt;
&lt;li&gt;The Documentation has been updated with the changes made to GDB, and on setting up a debugging environment for embedded debugging.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;communication-and-work-management&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#communication-and-work-management&#34;&gt;#&lt;/a&gt; Communication and Work Management&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Discord was the primary platform of communication between my mentors and I, along with other members of the community.&lt;/li&gt;
&lt;li&gt;Weekly meetings to discuss Status Updates and keep everyone up to date with the project.&lt;/li&gt;
&lt;li&gt;The RTEMS Gitlab instance was used to coordinate issues, tickets, and Merge Request discussions, along with engineering discussions on Discord.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;future-scope-for-the-project&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#future-scope-for-the-project&#34;&gt;#&lt;/a&gt; Future Scope for the Project&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Add more RTEMS pretty-printer to support the feature for a larger number of Structures and Objects.&lt;/li&gt;
&lt;li&gt;Create a new class of RTEMS GDB commands (which would again, be automatically loaded and set up with no work from the User&#39;s perspective).&lt;/li&gt;
&lt;li&gt;Extending the RTEMS Documentation further to add Debugging manuals for different debuggers, and eventually add RTEMS-specific GDB commands.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;challenges-faced-and-things-learned&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#challenges-faced-and-things-learned&#34;&gt;#&lt;/a&gt; Challenges Faced and Things Learned&lt;/h2&gt;
&lt;h3 id=&#34;challenges&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#challenges&#34;&gt;#&lt;/a&gt; Challenges:&lt;/h3&gt;
&lt;h4 id=&#34;integrating-python-and-gdb-with-static-linking-in-rtems&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#integrating-python-and-gdb-with-static-linking-in-rtems&#34;&gt;#&lt;/a&gt; Integrating Python and GDB with Static Linking in RTEMS&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;RTEMS uses static linking, which complicates GDB&#39;s ability to automatically load Python scripts, a feature that works for dynamically linked executables. This required developing a &lt;a href=&#34;#approach&#34;&gt;custom solution&lt;/a&gt; to ensure Python scripts could be executed within the RTEMS environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;developing-a-custom-solution-for-script-loading&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#developing-a-custom-solution-for-script-loading&#34;&gt;#&lt;/a&gt; Developing a Custom Solution for Script Loading&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The conventional methods for loading Python scripts in GDB did not apply to RTEMS. I had to devise a new method to introduce a  &lt;code&gt;.debug_gdb_scripts&lt;/code&gt;  section in RTEMS executables.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;things-learned&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#things-learned&#34;&gt;#&lt;/a&gt; Things Learned:&lt;/h3&gt;
&lt;h4 id=&#34;adaptability-and-problem-solving&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#adaptability-and-problem-solving&#34;&gt;#&lt;/a&gt; Adaptability and Problem-Solving&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;I learned to adapt to unexpected challenges, such as implementing a novel solution for integrating Python into GDB for RTEMS. This required creativity and persistence, especially when initial approaches did not work.&lt;/li&gt;
&lt;li&gt;Developed a stronger ability to think outside the box and approach problems from different angles.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;effective-communication&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#effective-communication&#34;&gt;#&lt;/a&gt; Effective Communication&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Regular communication with mentors and team members was crucial. Coordinating through platforms like Discord and GitLab helped me understand the importance of clear, consistent updates and feedback.&lt;/li&gt;
&lt;li&gt;Enhanced skills in articulating ideas and progress effectively, which is vital for collaborative work.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;time-management&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#time-management&#34;&gt;#&lt;/a&gt; Time Management&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Balancing the demands of GSoC with other commitments required careful planning and prioritization. Managing a project with defined milestones and deadlines improved my time management skills.&lt;/li&gt;
&lt;li&gt;Improved ability to set realistic goals, manage deadlines, and handle multiple tasks efficiently.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;project-ownership-and-responsibility&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#project-ownership-and-responsibility&#34;&gt;#&lt;/a&gt; Project Ownership and Responsibility&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Taking ownership of the project from inception to completion underscored the importance of responsibility. Ensuring that my contributions were valuable and well-documented was a crucial aspect of this.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;feedback-and-iteration&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#feedback-and-iteration&#34;&gt;#&lt;/a&gt; Feedback and Iteration&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Receiving and acting on feedback was essential for refining my work. Iterative improvement based on input from my mentors helped me produce better results.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;note-of-thanks&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#note-of-thanks&#34;&gt;#&lt;/a&gt; Note of Thanks&lt;/h2&gt;
&lt;p&gt;This project would not have seen its successful completion without the ongoing support of many people. I would specially like to thank:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Christian Mauderer&lt;/strong&gt; and &lt;strong&gt;Chris Johns&lt;/strong&gt;: For being fantastic mentors who were always ready to help me, and were patient with me (even with things I was initially clueless about). They have been with me from the very start and continue to support me.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Joel Sherrill&lt;/strong&gt;, &lt;strong&gt;Gedare Bloom&lt;/strong&gt; and &lt;strong&gt;Amar Takhar&lt;/strong&gt;: For being awesome maintainers and helping me along the way in more ways than I can recollect - not just regarding my project but also discussions outside it.&lt;/li&gt;
&lt;li&gt;My mentors and peers at &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iaTBzLmlu&#34;&gt;team bi0s&lt;/span&gt; - specifically my mentor &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94LmNvbS9hbXVuX3JoYQ==&#34;&gt;AmunRha&lt;/span&gt; - for inspiring me to try out GSoC and encouraging me throughout.&lt;/li&gt;
&lt;li&gt;My family, for their selfless support.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;footnotes&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#footnotes&#34;&gt;#&lt;/a&gt; Footnotes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdW1tZXJvZmNvZGUud2l0aGdvb2dsZS5jb20vcHJvZ3JhbXMvMjAyNC9wcm9qZWN0cy9adGVmUzlHTQ==&#34;&gt;Project Selection link&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xVmVTLVFDSnY1SFVFNHBVVThqSi1PcXBZU3ZuZmZwWmNsWEY3S2JLR3FBdy9lZGl0P3VzcD1zaGFyaW5n&#34;&gt;Proposal&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRsYWIucnRlbXMub3JnL2dyb3Vwcy9ydGVtcy8tL2VwaWNzLzE=&#34;&gt;Project Tracker (Gitlab Epic)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="GSoC" scheme="https://the-m3chanic.github.io/categories/GSoC/" />
        <category term="Google Summer of Code" scheme="https://the-m3chanic.github.io/tags/Google-Summer-of-Code/" />
        <category term="GDB" scheme="https://the-m3chanic.github.io/tags/GDB/" />
        <category term="RTEMS" scheme="https://the-m3chanic.github.io/tags/RTEMS/" />
        <category term="Embedded" scheme="https://the-m3chanic.github.io/tags/Embedded/" />
        <category term="Debugging" scheme="https://the-m3chanic.github.io/tags/Debugging/" />
        <updated>2024-08-25T11:41:29.000Z</updated>
    </entry>
    <entry>
        <id>https://the-m3chanic.github.io/2024/06/06/GSoC-with-RTEMS-1/</id>
        <title>GSoC with RTEMS! - 1/n</title>
        <link rel="alternate" href="https://the-m3chanic.github.io/2024/06/06/GSoC-with-RTEMS-1/"/>
        <content type="html">&lt;p&gt;Extending the features of a debugger, especially GDB, sounded like a fun and interesting project at first glance. I already have quite a bit of experience working with GDB, and use it almost daily while Reverse Engineering or during CTFs.&lt;br /&gt;
For those of you that are not familiar, CTF stands for &amp;quot;Capture the Flag&amp;quot;. It is a competition wherein the hosting team creates and puts out challenges/services that are intentionally vulnerable - usually in a way that is specific to a single field of Cyber Security - and the point of the challenge is to figure out what the vulnerability is and use it to get a text string from it called a &amp;quot;flag&amp;quot;. Capture more flags, gain more points. I play CTFs with &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iaTBzLmlu&#34;&gt;team bi0s&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;GDB has an awesome Python API that it utilizes to do things it cannot do straight out the box, and one such thing is pretty-printing.&lt;/p&gt;
&lt;p&gt;Imagine you have a weird class/structure in your program, and you want to view it in memory, so you pop it open in GDB. Then you print your variable in GDB and it spits out something so awful that you wish you never started debugging in the first place. This is because GDB obviously cannot know about any and every single structure out there, and sometimes it needs a little help - this is where the awesome Python API I mentioned comes in.&lt;/p&gt;
&lt;p&gt;Python essentially hooks onto GDB and interprets something GDB might be unable to, then do some Python magic and voila, you have the same structure neatly formatted! Some nice examples and a deeper explanation of what pretty-printing can be found in the &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zb3VyY2V3YXJlLm9yZy9nZGIvY3VycmVudC9vbmxpbmVkb2NzL2dkYi5odG1sL1ByZXR0eS1QcmludGluZy5odG1sI1ByZXR0eS1QcmludGluZw==&#34;&gt;documentation&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;GCC ships pretty-printing scripts for  &lt;code&gt;libstdcxx&lt;/code&gt; , which is essentially all of the C++ STL Structures, and my job is to get the GDB installed on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnRlbXMub3Jn&#34;&gt;RTEMS&lt;/span&gt; to automatically load these pretty-printing scripts at load-time, to enhance the debugging experience on RTEMS 😃. Next, add pretty-printing support for kernel structures present on RTEMS.&lt;/p&gt;
&lt;p&gt;Starting off, I already had a couple of things to get ticked off my checklist. I mainly wanted to set up a proper debugging environment, and also study various commonly used kernel structures - before diving deeper into my project. Since my project itself was to extend the functionality of the debugger, what good is it if I don&#39;t have a debugging environment setup in place?&lt;/p&gt;
&lt;p&gt;Let&#39;s jump right into my debugger setup then.&lt;/p&gt;
&lt;p&gt;I am working on a Windows 11 (x64), WSL2 (Arch) system. On top of this, I have the RTEMS tooling installed from the instructions in their &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLnJ0ZW1zLm9yZy9icmFuY2hlcy9tYXN0ZXIvdXNlci9zdGFydC9zb3VyY2VzLmh0bWw=&#34;&gt;documentation&lt;/span&gt;. On top of that, they provide a variety of options to build various BSPs (think of BSPs as housing for the OS to be embedded upon). I needed a build setup such that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I could compile RTEMS C++ programs at will&lt;/li&gt;
&lt;li&gt;GDB could debug those programs remotely through a remote emulator (either built in, or using &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucWVtdS5vcmc=&#34;&gt;Qemu&lt;/span&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, to build a BSP. I had to make 2 important choices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Which architecture will I use?&lt;/li&gt;
&lt;li&gt;Which BSP will I use for said architecture? (Note: A single architecture can support multiple BSPs)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I initially thought  &lt;code&gt;x86_64&lt;/code&gt;  arch, along with any suitable BSP for that arch would have me good to go, but I was sadly mistaken. Not only did I struggle to find BSPs for  &lt;code&gt;x86_64&lt;/code&gt; , but I also found that there were no test configurations (yet) for any of the  &lt;code&gt;x86_64&lt;/code&gt;  BSPs 😦, so I decided not to proceed with that&lt;/p&gt;
&lt;p&gt;Next up, I chose the  &lt;code&gt;sparc&lt;/code&gt;  arch, along with the  &lt;code&gt;erc32&lt;/code&gt;  BSP, since that was one which seemed to have very good support for emulation and GDB support, and was also the one used in most of the examples mentioned in the docs. So I went ahead and built that.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sparc&lt;/code&gt;  has an emulator built in in RTEMS,  &lt;code&gt;sparc-rtems6-sis&lt;/code&gt;  ( &lt;code&gt;sis&lt;/code&gt; : Sparc Instruction Set Simulator), which can emulate the instructions of the RTEMS executable, and GDB can attach to the process through a TCP port.&lt;/p&gt;
&lt;p&gt;However, although compiling RTEMS C++ programs and running them worked perfectly on my  &lt;code&gt;sparc/erc32&lt;/code&gt;  build, I couldn&#39;t debug (i.e, step through) code conveniently. I kept hitting some kind of data access violation exception, due to which RTEMS would have a fatal crash and exit. Sad.&lt;/p&gt;
&lt;p&gt;So I finalised on the  &lt;code&gt;arm/xilinx_zynq_a9_qemu&lt;/code&gt;  BSP upon the suggestion of my mentor, which worked perfectly. So, I will be using that for the rest of this blog.&lt;/p&gt;
&lt;p&gt;First, a sample C++ program.&lt;br /&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// main.cc &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;numeric&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; v = std::&lt;span class=&#34;built_in&#34;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt;(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::&lt;span class=&#34;built_in&#34;&gt;iota&lt;/span&gt;(std::&lt;span class=&#34;built_in&#34;&gt;begin&lt;/span&gt;(v), std::&lt;span class=&#34;built_in&#34;&gt;end&lt;/span&gt;(v), &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; i : v) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; std::endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;First off, RTEMS uses  &lt;code&gt;waf&lt;/code&gt;  (an alternative to  &lt;code&gt;make&lt;/code&gt; ), to build BSPs and applications on the platform. It&#39;s pretty versatile and easy to understand. You need 2 main things to build any app like this on RTEMS (apart from the source, of course) -  &lt;code&gt;waf&lt;/code&gt;  (the script doing all the work) &amp;amp;  &lt;code&gt;wscript&lt;/code&gt;  (the waf script containing instructions to be executed). Apart from these 2 files, you would also need some dependency files, and an initialisation script.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLnJ0ZW1zLm9yZy9icmFuY2hlcy9tYXN0ZXIvdXNlci9zdGFydC9hcHAuaHRtbA==&#34;&gt;This&lt;/span&gt; page in the documentation gives a pretty good overview on how one can build an app on RTEMS.&lt;/p&gt;
&lt;p&gt;Here is my  &lt;code&gt;wscript&lt;/code&gt;  for all C++ applications like the one above:&lt;br /&gt;
&lt;figure class=&#34;highlight py&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# wscript &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; __future__ &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; print_function&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rtems_version = &lt;span class=&#34;string&#34;&gt;&amp;quot;6&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; rtems_waf.rtems &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; rtems&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;except&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;error: no rtems_waf git submodule&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; sys&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sys.exit(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;init&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ctx&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    rtems.init(ctx, version = rtems_version, long_commands = &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;bsp_configure&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;conf, arch_bsp&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# Add BSP specific configuration checks&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;options&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;opt&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    rtems.options(opt)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;configure&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;conf&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    rtems.configure(conf, bsp_configure = bsp_configure)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;build&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;bld&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    rtems.build(bld)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    bld(features = &lt;span class=&#34;string&#34;&gt;&amp;#x27;cxx cxxprogram&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        target = &lt;span class=&#34;string&#34;&gt;&amp;#x27;cxx_stdvec.exe&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cxxflags = &lt;span class=&#34;string&#34;&gt;&amp;#x27;-std=c++11 -g -O2 -lstdc++&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        source = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;main.cc&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;rtems_config.c&amp;#x27;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The main function we need to focus on is  &lt;code&gt;build&lt;/code&gt; . Note the  &lt;code&gt;features&lt;/code&gt;  (type of program), and  &lt;code&gt;cxxflags&lt;/code&gt;  parameters passed to the  &lt;code&gt;bld&lt;/code&gt;  function.&lt;/p&gt;
&lt;p&gt;The application can be built with:&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# configure the waf for the BSP you are building for &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;./waf configure --prefix=$HOME/quick-start/rtems/6 --rtems-bsps=arm/xilinx_zynq_a9_qemu&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# build the app&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;./waf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# run the executable to ensure it works&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rtems-run --rtems-bsps=xilinx_zynq_a9_qemu build/arm-rtems6-xilinx_zynq_a9_qemu/cxx_vectorfail.exe&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Once you confirm that the app works, we can move onto debugging it.&lt;br /&gt;
First, for emulation, I went with qemu. I already had a  &lt;code&gt;qemu-system-arm&lt;/code&gt;  setup so it seemed like the most logical option.&lt;/p&gt;
&lt;p&gt;Program can be emulated with:&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# machine type: xilinx-zynq-a9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# -m 256: 256 megabytes of memory for emulation&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# no-reboot: prevents the machine from automatically rebooting after shutdown&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# -serial null: serial port output is piped to /dev/null&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# -serial mon:stdio : redirects serial monitor output through stdio &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# -nographic: disables graphics &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# -s: enables GDB to debug &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# -S: starts up Qemu in a paused state, allowing GDB time to connect before execution begins &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;qemu-system-arm -M xilinx-zynq-a9 -m \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    256M -no-reboot -serial \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    null -serial mon:stdio -nographic \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -s -S&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;On a separate terminal, connect to this emulator (default port: 1234)&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;arm-rtems6-gdb &amp;lt;app_path.exe&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# inside gdb &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(gdb) target extended-remote localhost:1234 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(gdb) load&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# any gdb command you want&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More information on remote debugging can be found &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zb3VyY2V3YXJlLm9yZy9nZGIvY3VycmVudC9vbmxpbmVkb2NzL2dkYi5odG1sL0Nvbm5lY3RpbmcuaHRtbA==&#34;&gt;here&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Voila! Debugging environment set up!&lt;/p&gt;
&lt;p&gt;Now, this is a pretty big process, with a lot of commands. This can be made easier, of course. Shell scripting for the win.&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# ./setup.sh &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# initialise environment to build the application &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo &amp;quot;[+] Installing waf...&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;curl https://waf.io/waf-2.0.19 &amp;gt; waf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;chmod +x waf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo &amp;quot;[+] Initialising repository and adding dependencies...&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git init&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git submodule add git://git.rtems.org/rtems_waf.git rtems_waf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo &amp;quot;[+] Configuring waf...&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;./waf configure --rtems=$HOME/quick-start/rtems/6 --rtems-bsp=arm/xilinx_zynq_a9_qemu&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo &amp;quot;[+] Building application...&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;./waf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;echo &amp;quot;[+] Running application...&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rtems-run --rtems-bsps=xilinx_zynq_a9_qemu build/arm-rtems6-xilinx_zynq_a9_qemu/cxx_vectorfail.exe&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;On a different terminal:&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;qemu-system-arm -M xilinx-zynq-a9 -m \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    256M -no-reboot -serial \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    null -serial mon:stdio -nographic \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    -s -S&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Make a script called  &lt;code&gt;init.gdb&lt;/code&gt; &lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;target extended-remote localhost:1234&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;load&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;On the first terminal, create a new shell script&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# ./loadgdb.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;arm-rtems6-gdb -x init.gdb build/arm-rtems6-xilinx_zynq_a9_qemu/cxx_vectorfail.exe&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;I have all of these configured as commands on my terminal to make life easier, you could do that as well.&lt;/p&gt;
&lt;p&gt;In next week&#39;s blog, I will be diving straight into the main crux of my project - the issue at hand, and how I plan on fixing it, stay tuned!&lt;/p&gt;
</content>
        <category term="GSoC" scheme="https://the-m3chanic.github.io/categories/GSoC/" />
        <category term="Google Summer of Code" scheme="https://the-m3chanic.github.io/tags/Google-Summer-of-Code/" />
        <category term="GDB" scheme="https://the-m3chanic.github.io/tags/GDB/" />
        <category term="RTEMS" scheme="https://the-m3chanic.github.io/tags/RTEMS/" />
        <category term="Embedded" scheme="https://the-m3chanic.github.io/tags/Embedded/" />
        <category term="Debugging" scheme="https://the-m3chanic.github.io/tags/Debugging/" />
        <updated>2024-06-06T22:00:07.000Z</updated>
    </entry>
</feed>
